)]}'
{"version":3,"file":"/packages/github.js","sources":["github/github_configure.html","github/github_configure.js","github/github_client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,yE;AACA,kB;AACA,sB;AACA,wV;AACA,kB;AACA,iB;AACA,sD;AACA,6F;AACA,kB;AACA,iB;AACA,sD;AACA,kD;AACA,I;;;;;;;;;;;;;;;;;;;ACbA,qE;AACA,8B;AACA,E;;AAEA,oE;AACA,U;AACA,+C;AACA,gD;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;ACTA,Y;;AAEA,0C;AACA,4B;AACA,mF;AACA,4E;AACA,W;AACA,kF;AACA,qD;AACA,4E;AACA,gD;AACA,iB;AACA,G;;AAEA,gF;AACA,gB;AACA,2E;AACA,8C;AACA,W;AACA,G;AACA,wC;;AAEA,4D;AACA,6D;;AAEA,gB;AACA,oD;AACA,yC;AACA,+B;AACA,sE;AACA,oC;;AAEA,kB;AACA,a;AACA,qE;AACA,6B;AACA,I;AACA,E","sourcesContent":["\nTemplate.__define__(\"configureLoginServiceDialogForGithub\", (function() {\n  var self = this;\n  var template = this;\n  return [ HTML.Raw(\"<p>\\n    First, you'll need to get a Github Client ID. Follow these steps:\\n  </p>\\n  \"), HTML.OL(HTML.Raw('\\n    <li>\\n      Visit <a href=\"https://github.com/settings/applications/new\" target=\"blank\">https://github.com/settings/applications/new</a>\\n    </li>\\n    '), HTML.LI(\"\\n      Set Homepage URL to: \", HTML.SPAN({\n    \"class\": \"url\"\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"siteUrl\"));\n  }), \"\\n    \"), \"\\n    \", HTML.LI(\"\\n      Set Authorization callback URL to: \", HTML.SPAN({\n    \"class\": \"url\"\n  }, function() {\n    return Spacebars.mustache(self.lookup(\"siteUrl\"));\n  }, \"_oauth/github?close\"), \"\\n    \"), \"\\n  \") ];\n}));\n","Template.configureLoginServiceDialogForGithub.siteUrl = function () {\n  return Meteor.absoluteUrl();\n};\n\nTemplate.configureLoginServiceDialogForGithub.fields = function () {\n  return [\n    {property: 'clientId', label: 'Client ID'},\n    {property: 'secret', label: 'Client Secret'}\n  ];\n};","Github = {};\n\n// Request Github credentials for the user\n// @param options {optional}\n// @param credentialRequestCompleteCallback {Function} Callback function to call on\n//   completion. Takes one argument, credentialToken on success, or Error on\n//   error.\nGithub.requestCredential = function (options, credentialRequestCompleteCallback) {\n  // support both (options, callback) and (callback).\n  if (!credentialRequestCompleteCallback && typeof options === 'function') {\n    credentialRequestCompleteCallback = options;\n    options = {};\n  }\n\n  var config = ServiceConfiguration.configurations.findOne({service: 'github'});\n  if (!config) {\n    credentialRequestCompleteCallback && credentialRequestCompleteCallback(\n      new ServiceConfiguration.ConfigError());\n    return;\n  }\n  var credentialToken = Random.secret();\n\n  var scope = (options && options.requestPermissions) || [];\n  var flatScope = _.map(scope, encodeURIComponent).join('+');\n\n  var loginUrl =\n        'https://github.com/login/oauth/authorize' +\n        '?client_id=' + config.clientId +\n        '&scope=' + flatScope +\n        '&redirect_uri=' + Meteor.absoluteUrl('_oauth/github?close') +\n        '&state=' + credentialToken;\n\n  OAuth.showPopup(\n    loginUrl,\n    _.bind(credentialRequestCompleteCallback, null, credentialToken),\n    {width: 900, height: 450}\n  );\n};\n"]}