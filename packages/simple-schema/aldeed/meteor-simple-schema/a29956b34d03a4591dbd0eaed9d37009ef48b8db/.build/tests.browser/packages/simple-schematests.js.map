{"version":3,"file":"/packages/simple-schema:tests.js","sources":["simple-schema/simple-schema-tests.js","simple-schema/mongo-object-tests.js"],"names":[],"mappings":";;;;;;;;AAAA,E;AACA,wB;AACA,G;;AAEA,4B;;AAEA,uC;AACA,iC;AACA,mB;AACA,qB;AACA,E;;AAEA,qB;AACA,uB;AACA,wB;AACA,yC;AACA,I;AACA,qB;AACA,8C;AACA,I;AACA,2B;AACA,oC;AACA,mB;AACA,4D;AACA,I;AACA,wB;AACA,qB;AACA,I;AACA,2B;AACA,Y;AACA,sB;AACA,uB;AACA,M;AACA,G;AACA,E;;AAEA,4B;AACA,mB;AACA,gB;AACA,I;AACA,oB;AACA,iB;AACA,I;AACA,mB;AACA,gB;AACA,I;AACA,iB;AACA,c;AACA,I;AACA,kB;AACA,iB;AACA,4B;AACA,I;AACA,gB;AACA,iB;AACA,0B;AACA,I;AACA,mB;AACA,gB;AACA,I;AACA,oC;AACA,gB;AACA,I;AACA,mB;AACA,iB;AACA,kB;AACA,I;AACA,oC;AACA,gB;AACA,I;AACA,kB;AACA,iB;AACA,mB;AACA,W;AACA,G;AACA,G;;AAEA,c;AACA,iE;AACA,mD;AACA,G;;AAEA,2B;AACA,W;AACA,iB;AACA,kB;AACA,I;AACA,iB;AACA,iB;AACA,mB;AACA,Y;AACA,Y;AACA,yB;AACA,I;AACA,sB;AACA,mB;AACA,mB;AACA,Y;AACA,Y;AACA,gB;AACA,e;AACA,I;AACA,mB;AACA,iB;AACA,mB;AACA,4C;AACA,I;AACA,yB;AACA,iB;AACA,mB;AACA,mC;AACA,iE;AACA,K;AACA,I;AACA,wB;AACA,mB;AACA,mB;AACA,4C;AACA,I;AACA,Y;AACA,kB;AACA,kB;AACA,I;AACA,iB;AACA,oB;AACA,kB;AACA,I;AACA,W;AACA,iB;AACA,kB;AACA,I;AACA,iB;AACA,iB;AACA,kB;AACA,I;AACA,iB;AACA,iB;AACA,mB;AACA,Y;AACA,W;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,U;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,U;AACA,I;AACA,2B;AACA,iB;AACA,mB;AACA,qB;AACA,gB;AACA,M;AACA,qB;AACA,gB;AACA,K;AACA,I;AACA,mB;AACA,iB;AACA,mB;AACA,4B;AACA,I;AACA,yB;AACA,iB;AACA,mB;AACA,mC;AACA,yD;AACA,K;AACA,I;AACA,wB;AACA,mB;AACA,mB;AACA,4B;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,iB;AACA,I;AACA,S;AACA,e;AACA,kB;AACA,I;AACA,c;AACA,iB;AACA,kB;AACA,I;AACA,e;AACA,e;AACA,mB;AACA,0C;AACA,2C;AACA,I;AACA,yB;AACA,e;AACA,mB;AACA,qB;AACA,8C;AACA,M;AACA,qB;AACA,gD;AACA,K;AACA,I;AACA,U;AACA,iB;AACA,6B;AACA,kB;AACA,I;AACA,Q;AACA,iB;AACA,2B;AACA,kB;AACA,I;AACA,iB;AACA,kB;AACA,mB;AACA,kB;AACA,I;AACA,mB;AACA,iB;AACA,mB;AACA,kB;AACA,G;AACA,G;;AAEA,a;AACA,mB;AACA,yD;AACA,2C;AACA,G;;AAEA,4B;AACA,a;AACA,gB;AACA,I;AACA,oB;AACA,iB;AACA,wB;AACA,wD;AACA,kC;AACA,O;AACA,K;AACA,G;AACA,G;;AAEA,gC;AACA,S;AACA,iB;AACA,kB;AACA,I;AACA,Y;AACA,mB;AACA,e;AACA,I;AACA,qB;AACA,iB;AACA,U;AACA,I;AACA,qB;AACA,iB;AACA,0C;AACA,I;AACA,oB;AACA,iB;AACA,kB;AACA,I;AACA,Y;AACA,kB;AACA,I;AACA,qB;AACA,gB;AACA,I;AACA,uB;AACA,mB;AACA,kB;AACA,I;AACA,8B;AACA,gB;AACA,I;AACA,gC;AACA,iB;AACA,iB;AACA,G;AACA,G;;AAEA,mC;AACA,S;AACA,gB;AACA,I;AACA,gB;AACA,iB;AACA,2B;AACA,wB;AACA,iB;AACA,O;AACA,K;AACA,I;AACA,gB;AACA,iB;AACA,2B;AACA,2B;AACA,iB;AACA,c;AACA,yB;AACA,O;AACA,K;AACA,I;AACA,Y;AACA,iB;AACA,kB;AACA,I;AACA,c;AACA,iB;AACA,mB;AACA,2B;AACA,0C;AACA,0B;AACA,2C;AACA,c;AACA,qB;AACA,O;AACA,K;AACA,I;AACA,mB;AACA,mB;AACA,mB;AACA,2B;AACA,0C;AACA,0B;AACA,6B;AACA,mB;AACA,6B;AACA,oC;AACA,e;AACA,gB;AACA,kB;AACA,oB;AACA,6B;AACA,oC;AACA,a;AACA,Y;AACA,S;AACA,O;AACA,K;AACA,I;AACA,4B;AACA,e;AACA,kB;AACA,I;AACA,+B;AACA,iB;AACA,kB;AACA,I;AACA,qB;AACA,mB;AACA,kB;AACA,I;AACA,2B;AACA,gB;AACA,I;AACA,6B;AACA,iB;AACA,4B;AACA,mB;AACA,K;AACA,G;AACA,G;;AAEA,sC;AACA,S;AACA,iB;AACA,yB;AACA,kB;AACA,I;AACA,U;AACA,iB;AACA,yB;AACA,kB;AACA,I;AACA,Y;AACA,iB;AACA,yB;AACA,kB;AACA,I;AACA,Y;AACA,mB;AACA,qB;AACA,kB;AACA,G;AACA,G;;AAEA,gC;AACA,Q;AACA,iB;AACA,mB;AACA,wB;AACA,sB;AACA,K;AACA,G;AACA,G;;AAEA,gC;AACA,M;AACA,mB;AACA,yB;AACA,uD;AACA,K;AACA,I;AACA,M;AACA,mB;AACA,yB;AACA,uD;AACA,K;AACA,G;AACA,G;;AAEA,E;AACA,sB;AACA,G;;AAEA,E;AACA,uB;AACA,G;;AAEA,6D;AACA,yD;AACA,iF;AACA,kC;AACA,mB;AACA,wB;AACA,G;;AAEA,gC;AACA,kE;AACA,iB;AACA,C;;AAEA,yD;AACA,uD;AACA,C;;AAEA,E;AACA,qB;AACA,G;;AAEA,E;AACA,c;AACA,G;;AAEA,gF;AACA,0B;AACA,2B;AACA,0B;AACA,sB;AACA,+B;AACA,6C;AACA,qC;AACA,qB;AACA,uB;AACA,M;AACA,qB;AACA,4B;AACA,K;AACA,K;AACA,mC;;AAEA,0B;AACA,2B;AACA,0B;AACA,sB;AACA,+B;AACA,6C;AACA,qC;AACA,qB;AACA,uB;AACA,M;AACA,K;AACA,mC;AACA,G;;AAEA,kF;AACA,6B;AACA,mC;;AAEA,sB;AACA,yB;AACA,0B;AACA,yB;AACA,uB;AACA,wB;AACA,sB;AACA,yB;AACA,qB;AACA,0B;AACA,K;AACA,K;AACA,mC;;AAEA,sB;AACA,yB;AACA,0B;AACA,yB;AACA,uB;AACA,wB;AACA,sB;AACA,yB;AACA,sB;AACA,K;AACA,mC;;AAEA,sB;AACA,yB;AACA,0B;AACA,yB;AACA,uB;AACA,wB;AACA,sB;AACA,yB;AACA,wB;AACA,K;AACA,mC;;AAEA,sB;AACA,2B;AACA,4B;AACA,2B;AACA,yB;AACA,0B;AACA,wB;AACA,2B;AACA,qB;AACA,4B;AACA,K;AACA,K;AACA,mC;;AAEA,sB;AACA,uB;AACA,0B;AACA,yB;AACA,uB;AACA,wB;AACA,sB;AACA,yB;AACA,qB;AACA,wB;AACA,K;AACA,K;AACA,mC;;AAEA,sB;AACA,0B;AACA,0B;AACA,yB;AACA,uB;AACA,wB;AACA,sB;AACA,yB;AACA,qB;AACA,2B;AACA,K;AACA,K;AACA,mC;;AAEA,oB;AACA,0B;AACA,6B;AACA,iB;AACA,K;AACA,mC;AACA,G;;AAEA,E;AACA,gF;AACA,G;;AAEA,uF;AACA,iC;AACA,6B;AACA,4B;AACA,wB;AACA,iC;AACA,+C;AACA,uC;AACA,uB;AACA,yB;AACA,Q;AACA,uB;AACA,8B;AACA,O;AACA,oB;AACA,mC;;AAEA,6B;AACA,6B;AACA,4B;AACA,wB;AACA,iC;AACA,+C;AACA,uC;AACA,uB;AACA,yB;AACA,Q;AACA,6C;AACA,oB;AACA,mC;AACA,G;;AAEA,+F;AACA,yC;AACA,6B;AACA,4B;AACA,wB;AACA,iC;AACA,+C;AACA,uC;AACA,uB;AACA,yB;AACA,Q;AACA,uB;AACA,8B;AACA,O;AACA,oB;AACA,mC;;AAEA,qC;AACA,6B;AACA,4B;AACA,wB;AACA,iC;AACA,+C;AACA,uC;AACA,uB;AACA,yB;AACA,Q;AACA,6C;AACA,oB;AACA,mC;AACA,G;;AAEA,2F;AACA,2F;AACA,0B;AACA,W;AACA,6B;AACA,4B;AACA,wB;AACA,gC;AACA,M;AACA,mB;AACA,+C;AACA,uC;AACA,uB;AACA,yB;AACA,Q;AACA,6C;AACA,K;AACA,iB;AACA,uC;;AAEA,0B;AACA,W;AACA,6B;AACA,4B;AACA,wB;AACA,gC;AACA,M;AACA,mB;AACA,+C;AACA,uC;AACA,uB;AACA,yB;AACA,Q;AACA,6C;AACA,K;AACA,iB;AACA,uC;AACA,G;;AAEA,yF;AACA,uD;AACA,mC;;AAEA,6B;AACA,2B;AACA,4B;AACA,2B;AACA,yB;AACA,0B;AACA,wB;AACA,2B;AACA,2C;AACA,0B;AACA,mC;;AAEA,6B;AACA,6B;AACA,8B;AACA,6B;AACA,2B;AACA,4B;AACA,0B;AACA,6B;AACA,6C;AACA,0B;AACA,mC;;AAEA,6B;AACA,yB;AACA,4B;AACA,2B;AACA,yB;AACA,0B;AACA,wB;AACA,2B;AACA,yC;AACA,0B;AACA,mC;;AAEA,6B;AACA,4B;AACA,4B;AACA,2B;AACA,yB;AACA,0B;AACA,wB;AACA,2B;AACA,4C;AACA,0B;AACA,mC;AACA,G;;AAEA,iG;AACA,+D;AACA,mC;;AAEA,qC;AACA,2B;AACA,4B;AACA,2B;AACA,yB;AACA,0B;AACA,wB;AACA,2B;AACA,2C;AACA,0B;AACA,mC;;AAEA,qC;AACA,6B;AACA,8B;AACA,6B;AACA,2B;AACA,4B;AACA,0B;AACA,6B;AACA,6C;AACA,0B;AACA,mC;;AAEA,qC;AACA,yB;AACA,4B;AACA,2B;AACA,yB;AACA,0B;AACA,wB;AACA,2B;AACA,yC;AACA,0B;AACA,mC;;AAEA,qC;AACA,4B;AACA,4B;AACA,2B;AACA,yB;AACA,0B;AACA,wB;AACA,2B;AACA,4C;AACA,0B;AACA,mC;;AAEA,oB;AACA,yC;AACA,+B;AACA,iB;AACA,0B;AACA,mC;AACA,G;;AAEA,6F;AACA,2F;;AAEA,yE;AACA,mC;;AAEA,sB;AACA,W;AACA,2B;AACA,4B;AACA,2B;AACA,wB;AACA,M;AACA,mB;AACA,0B;AACA,wB;AACA,2B;AACA,2C;AACA,K;AACA,uB;AACA,mC;;AAEA,sB;AACA,W;AACA,6B;AACA,8B;AACA,6B;AACA,0B;AACA,M;AACA,mB;AACA,4B;AACA,0B;AACA,6B;AACA,6C;AACA,K;AACA,uB;AACA,mC;;AAEA,sB;AACA,W;AACA,yB;AACA,4B;AACA,2B;AACA,wB;AACA,M;AACA,mB;AACA,wB;AACA,sB;AACA,2B;AACA,yC;AACA,K;AACA,uB;AACA,mC;;AAEA,sB;AACA,W;AACA,4B;AACA,4B;AACA,2B;AACA,wB;AACA,M;AACA,mB;AACA,2B;AACA,yB;AACA,2B;AACA,4C;AACA,K;AACA,uB;AACA,mC;AACA,G;;AAEA,uF;AACA,2C;AACA,2F;;AAEA,6B;AACA,6B;AACA,8B;AACA,6B;AACA,2B;AACA,4B;AACA,0B;AACA,6B;AACA,6C;AACA,c;AACA,2F;;AAEA,6B;AACA,6B;AACA,4B;AACA,wB;AACA,iC;AACA,+C;AACA,uC;AACA,yB;AACA,6C;AACA,c;AACA,mC;;AAEA,oB;AACA,iC;AACA,6B;AACA,c;AACA,mC;;AAEA,iC;AACA,4C;AACA,c;AACA,mC;AACA,G;;AAEA,yF;AACA,8B;AACA,2C;AACA,0C;AACA,G;;AAEA,iB;AACA,yB;AACA,0B;AACA,yB;AACA,uB;AACA,wB;AACA,sB;AACA,yB;AACA,yC;AACA,S;;AAEA,iB;AACA,uB;AACA,0B;AACA,yB;AACA,uB;AACA,wB;AACA,sB;AACA,yB;AACA,uC;AACA,S;;AAEA,iB;AACA,0B;AACA,0B;AACA,yB;AACA,uB;AACA,wB;AACA,sB;AACA,yB;AACA,0C;AACA,S;;AAEA,oB;;AAEA,oB;AACA,qB;AACA,0B;AACA,S;;AAEA,oB;AACA,qB;AACA,4B;AACA,S;AACA,G;;AAEA,yF;AACA,6C;AACA,2F;;AAEA,+D;AACA,8D;AACA,+B;AACA,sB;AACA,c;AACA,mC;;AAEA,+B;AACA,yB;AACA,c;AACA,mC;;AAEA,+B;AACA,uB;AACA,c;AACA,mC;;AAEA,oB;AACA,mC;AACA,yB;AACA,c;AACA,mC;;AAEA,mC;AACA,yB;AACA,yB;AACA,wB;AACA,c;AACA,mC;;AAEA,G;;AAEA,2F;AACA,mC;AACA,wB;AACA,yB;AACA,wB;AACA,sB;AACA,uB;AACA,oB;AACA,c;AACA,mC;;AAEA,oB;AACA,mC;AACA,yB;AACA,c;AACA,mC;;AAEA,mC;AACA,0B;AACA,0B;AACA,yB;AACA,c;AACA,mC;AACA,G;;AAEA,0F;AACA,qD;AACA,2B;AACA,qE;AACA,mC;AACA,G;;AAEA,4F;AACA,mD;AACA,2B;AACA,kE;AACA,4D;;AAEA,4B;AACA,wB;AACA,kF;AACA,sD;AACA,G;;AAEA,oE;AACA,yB;AACA,mB;AACA,kB;AACA,c;AACA,iB;AACA,uB;AACA,6B;AACA,oC;AACA,K;AACA,mC;AACA,uB;;AAEA,0B;AACA,4B;AACA,gB;AACA,gB;AACA,K;AACA,0D;;AAEA,qB;AACA,gB;AACA,K;AACA,sD;;AAEA,yB;AACA,gB;AACA,a;AACA,K;AACA,0D;;AAEA,qB;AACA,a;AACA,K;AACA,sD;;AAEA,yB;AACA,gB;AACA,0B;AACA,K;AACA,qD;;AAEA,qB;AACA,0B;AACA,K;AACA,iD;;AAEA,wB;AACA,gB;AACA,oB;AACA,K;AACA,qD;AACA,E;AACA,qB;AACA,oB;AACA,K;AACA,iD;;AAEA,2B;AACA,gB;AACA,wB;AACA,K;AACA,qD;;AAEA,qB;AACA,wB;AACA,K;AACA,iD;;AAEA,wB;;AAEA,uB;AACA,qB;AACA,mB;AACA,K;AACA,mC;;AAEA,uB;AACA,qB;AACA,c;AACA,K;AACA,mC;;AAEA,uB;AACA,gB;AACA,2B;AACA,K;AACA,qD;;AAEA,qB;AACA,2B;AACA,K;AACA,iD;;AAEA,sB;AACA,gB;AACA,qB;AACA,K;AACA,qD;AACA,E;AACA,qB;AACA,qB;AACA,K;AACA,iD;;AAEA,yB;AACA,qB;AACA,yB;AACA,K;AACA,mC;;AAEA,uB;;AAEA,yB;AACA,qB;AACA,kB;AACA,K;AACA,mC;;AAEA,0B;AACA,qB;AACA,gB;AACA,K;AACA,mC;;AAEA,yB;AACA,gB;AACA,0B;AACA,K;AACA,qD;;AAEA,qB;AACA,0B;AACA,K;AACA,iD;;AAEA,wB;AACA,gB;AACA,oB;AACA,K;AACA,qD;AACA,E;AACA,qB;AACA,oB;AACA,K;AACA,iD;;AAEA,2B;AACA,qB;AACA,wB;AACA,K;AACA,mC;;AAEA,0B;AACA,qB;AACA,e;AACA,K;AACA,mC;;AAEA,wB;AACA,qB;AACA,e;AACA,K;AACA,mC;;AAEA,yB;;AAEA,uB;AACA,qB;AACA,gB;AACA,K;AACA,mC;;AAEA,wB;AACA,qB;AACA,c;AACA,K;AACA,mC;;AAEA,uB;AACA,gB;AACA,wB;AACA,K;AACA,qD;;AAEA,qB;AACA,wB;AACA,K;AACA,iD;;AAEA,sB;AACA,gB;AACA,kB;AACA,K;AACA,qD;AACA,E;AACA,qB;AACA,kB;AACA,K;AACA,iD;;AAEA,uB;AACA,qB;AACA,W;AACA,K;AACA,mC;;AAEA,sB;;AAEA,qB;AACA,e;AACA,K;AACA,mC;;AAEA,qB;AACA,iB;AACA,K;AACA,mC;AACA,G;;AAEA,oE;AACA,sC;;AAEA,wC;AACA,qB;AACA,oB;AACA,gB;AACA,mB;AACA,yB;AACA,+B;AACA,sC;AACA,oB;AACA,mC;AACA,uB;;AAEA,0B;AACA,4B;AACA,+B;AACA,kB;AACA,2E;AACA,0D;;AAEA,oC;AACA,kB;AACA,oB;AACA,sD;;AAEA,yB;AACA,+B;AACA,e;AACA,2E;AACA,0D;;AAEA,oC;AACA,e;AACA,oB;AACA,sD;;AAEA,yB;AACA,+B;AACA,4B;AACA,2E;AACA,qD;;AAEA,oC;AACA,4B;AACA,oB;AACA,iD;;AAEA,wB;AACA,+B;AACA,sB;AACA,2E;AACA,qD;;AAEA,oC;AACA,sB;AACA,oB;AACA,iD;;AAEA,2B;AACA,+B;AACA,0B;AACA,2E;AACA,0D;;AAEA,oC;AACA,0B;AACA,oB;AACA,sD;;AAEA,wB;;AAEA,uB;AACA,oC;AACA,qB;AACA,oB;AACA,mC;;AAEA,uB;AACA,oC;AACA,gB;AACA,oB;AACA,mC;;AAEA,uB;AACA,+B;AACA,6B;AACA,2E;AACA,qD;;AAEA,oC;AACA,6B;AACA,oB;AACA,iD;;AAEA,sB;AACA,+B;AACA,uB;AACA,2E;AACA,qD;;AAEA,oC;AACA,uB;AACA,oB;AACA,iD;;AAEA,yB;AACA,oC;AACA,2B;AACA,oB;AACA,mC;;AAEA,uB;;AAEA,yB;AACA,oC;AACA,oB;AACA,oB;AACA,mC;;AAEA,0B;AACA,oC;AACA,kB;AACA,oB;AACA,mC;;AAEA,yB;AACA,+B;AACA,4B;AACA,2E;AACA,qD;;AAEA,oC;AACA,4B;AACA,oB;AACA,iD;;AAEA,wB;AACA,+B;AACA,sB;AACA,2E;AACA,qD;;AAEA,oC;AACA,sB;AACA,oB;AACA,iD;;AAEA,2B;AACA,oC;AACA,0B;AACA,oB;AACA,mC;;AAEA,0B;AACA,oC;AACA,iB;AACA,oB;AACA,mC;;AAEA,yB;;AAEA,uB;AACA,oC;AACA,kB;AACA,oB;AACA,mC;;AAEA,wB;AACA,oC;AACA,gB;AACA,oB;AACA,mC;;AAEA,uB;AACA,+B;AACA,0B;AACA,2E;AACA,qD;;AAEA,oC;AACA,0B;AACA,oB;AACA,iD;;AAEA,sB;AACA,+B;AACA,oB;AACA,2E;AACA,qD;;AAEA,oC;AACA,oB;AACA,oB;AACA,iD;;AAEA,uB;AACA,oC;AACA,a;AACA,oB;AACA,mC;;AAEA,sB;;AAEA,oC;AACA,iB;AACA,oB;AACA,mC;;AAEA,oC;AACA,mB;AACA,oB;AACA,mC;AACA,G;;AAEA,oE;AACA,gC;AACA,qB;AACA,oB;AACA,gB;AACA,yB;AACA,+B;AACA,sC;AACA,c;AACA,mC;;AAEA,uB;;AAEA,0B;AACA,4B;AACA,uB;AACA,kB;AACA,6D;AACA,0D;;AAEA,4B;AACA,kB;AACA,c;AACA,sD;;AAEA,yB;AACA,uB;AACA,e;AACA,6D;AACA,0D;;AAEA,4B;AACA,e;AACA,c;AACA,sD;;AAEA,yB;AACA,uB;AACA,4B;AACA,6D;AACA,qD;;AAEA,4B;AACA,4B;AACA,oB;AACA,iD;;AAEA,wB;AACA,uB;AACA,sB;AACA,6D;AACA,qD;;AAEA,4B;AACA,sB;AACA,c;AACA,iD;;AAEA,2B;AACA,uB;AACA,0B;AACA,6D;AACA,0D;;AAEA,4B;AACA,0B;AACA,c;AACA,sD;;AAEA,wB;;AAEA,uB;AACA,4B;AACA,qB;AACA,c;AACA,mC;;AAEA,uB;AACA,4B;AACA,gB;AACA,c;AACA,mC;;AAEA,uB;AACA,uB;AACA,6B;AACA,6D;AACA,qD;;AAEA,4B;AACA,6B;AACA,oB;AACA,iD;;AAEA,sB;AACA,uB;AACA,uB;AACA,6D;AACA,qD;;AAEA,4B;AACA,uB;AACA,c;AACA,iD;;AAEA,yB;AACA,4B;AACA,2B;AACA,c;AACA,mC;;AAEA,uB;;AAEA,yB;AACA,4B;AACA,oB;AACA,c;AACA,mC;;AAEA,0B;AACA,4B;AACA,kB;AACA,c;AACA,mC;;AAEA,yB;AACA,uB;AACA,4B;AACA,6D;AACA,qD;;AAEA,4B;AACA,4B;AACA,oB;AACA,iD;;AAEA,wB;AACA,uB;AACA,sB;AACA,6D;AACA,qD;;AAEA,4B;AACA,sB;AACA,c;AACA,iD;;AAEA,2B;AACA,4B;AACA,0B;AACA,c;AACA,mC;;AAEA,e;AACA,4B;AACA,sB;AACA,c;AACA,mC;;AAEA,4B;AACA,uB;AACA,c;AACA,mC;;AAEA,4B;AACA,yB;AACA,c;AACA,mC;;AAEA,uB;AACA,yB;AACA,6D;AACA,qD;;AAEA,4B;AACA,yB;AACA,c;AACA,iD;;AAEA,yB;;AAEA,uB;AACA,4B;AACA,kB;AACA,c;AACA,mC;;AAEA,wB;AACA,4B;AACA,gB;AACA,c;AACA,mC;;AAEA,uB;AACA,uB;AACA,0B;AACA,6D;AACA,qD;;AAEA,4B;AACA,0B;AACA,oB;AACA,iD;;AAEA,sB;AACA,uB;AACA,oB;AACA,6D;AACA,qD;;AAEA,4B;AACA,oB;AACA,c;AACA,iD;;AAEA,uB;AACA,4B;AACA,a;AACA,c;AACA,mC;;AAEA,sB;;AAEA,4B;AACA,iB;AACA,c;AACA,mC;;AAEA,4B;AACA,mB;AACA,c;AACA,mC;;AAEA,sB;;AAEA,4B;AACA,yB;AACA,0B;AACA,kC;AACA,4B;AACA,c;AACA,mC;;AAEA,6B;AACA,2B;AACA,wB;AACA,kC;AACA,8B;AACA,c;AACA,mC;;AAEA,iC;AACA,2B;AACA,wB;AACA,kC;AACA,8B;AACA,c;AACA,mC;;AAEA,qB;AACA,4B;AACA,2B;AACA,4B;AACA,oC;AACA,8B;AACA,c;AACA,mC;;AAEA,6B;AACA,yB;AACA,0B;AACA,kC;AACA,4B;AACA,c;AACA,mC;;AAEA,iC;AACA,yB;AACA,0B;AACA,kC;AACA,4B;AACA,c;AACA,mC;;AAEA,2B;AACA,6B;AACA,4C;AACA,yC;AACA,mD;AACA,8C;AACA,c;AACA,mC;;AAEA,iC;AACA,4C;AACA,yC;AACA,mD;AACA,8C;AACA,c;AACA,mC;;AAEA,wC;AACA,6B;AACA,2C;AACA,gD;AACA,oD;AACA,4C;AACA,c;AACA,mC;;AAEA,iC;AACA,2C;AACA,gD;AACA,oD;AACA,4C;AACA,c;AACA,mC;;AAEA,yB;AACA,6B;AACA,2C;AACA,uD;AACA,qD;AACA,0C;AACA,c;AACA,mC;;AAEA,iC;AACA,2C;AACA,uD;AACA,qD;AACA,0C;AACA,c;AACA,mC;;AAEA,8B;AACA,6B;AACA,uD;AACA,mE;AACA,iE;AACA,sD;AACA,c;AACA,mC;;AAEA,2D;AACA,6B;AACA,0B;AACA,uB;AACA,iC;AACA,8B;AACA,c;AACA,mC;;AAEA,6B;AACA,4C;AACA,yC;AACA,mD;AACA,8C;AACA,c;AACA,mC;;AAEA,gC;AACA,mC;AACA,gC;AACA,0C;AACA,qC;AACA,c;AACA,mC;;AAEA,4B;AACA,sB;AACA,mB;AACA,6B;AACA,4B;AACA,c;AACA,mC;;AAEA,4B;AACA,uB;AACA,oB;AACA,8B;AACA,6B;AACA,c;AACA,mC;AACA,G;;AAEA,uE;AACA,qB;AACA,yB;AACA,8B;AACA,K;AACA,mC;AACA,qB;AACA,yB;AACA,K;AACA,mC;AACA,c;AACA,qB;AACA,oB;AACA,K;AACA,mC;AACA,qB;AACA,mB;AACA,K;AACA,mC;AACA,qB;AACA,8B;AACA,K;AACA,mC;AACA,qB;AACA,6B;AACA,K;AACA,mC;;AAEA,qB;AACA,e;AACA,K;AACA,mC;;AAEA,Y;AACA,qB;AACA,gD;AACA,K;AACA,mC;AACA,qB;AACA,kD;AACA,K;AACA,mC;AACA,qB;AACA,0D;AACA,K;AACA,mC;AACA,qB;AACA,4D;AACA,K;AACA,mC;;AAEA,sC;;AAEA,qB;AACA,mD;AACA,K;AACA,mC;;AAEA,qB;AACA,yC;AACA,K;AACA,mC;;AAEA,qB;AACA,yB;AACA,K;AACA,mC;AACA,G;;AAEA,uE;AACA,qB;AACA,wC;AACA,gC;AACA,oB;AACA,mC;AACA,oC;AACA,2B;AACA,oB;AACA,mC;AACA,c;AACA,oC;AACA,sB;AACA,oB;AACA,mC;AACA,oC;AACA,qB;AACA,oB;AACA,mC;AACA,oC;AACA,gC;AACA,oB;AACA,mC;AACA,oC;AACA,+B;AACA,oB;AACA,mC;;AAEA,oC;AACA,iB;AACA,oB;AACA,mC;;AAEA,Y;AACA,oC;AACA,kD;AACA,oB;AACA,mC;AACA,oC;AACA,oD;AACA,oB;AACA,mC;AACA,oC;AACA,4D;AACA,oB;AACA,mC;AACA,oC;AACA,8D;AACA,oB;AACA,mC;AACA,sC;AACA,oC;AACA,qD;AACA,oB;AACA,mC;AACA,oC;AACA,2C;AACA,oB;AACA,mC;AACA,oC;AACA,2B;AACA,oB;AACA,mC;AACA,G;;AAEA,uE;AACA,qB;AACA,gC;AACA,gC;AACA,c;AACA,mC;AACA,4B;AACA,2B;AACA,c;AACA,mC;AACA,c;AACA,4B;AACA,sB;AACA,c;AACA,mC;AACA,4B;AACA,qB;AACA,c;AACA,mC;AACA,4B;AACA,gC;AACA,c;AACA,mC;AACA,4B;AACA,+B;AACA,c;AACA,mC;;AAEA,4B;AACA,iB;AACA,c;AACA,mC;;AAEA,4B;AACA,iB;AACA,c;AACA,yE;AACA,mC;;AAEA,Y;AACA,4B;AACA,kD;AACA,c;AACA,mC;AACA,4B;AACA,oD;AACA,c;AACA,mC;AACA,4B;AACA,4D;AACA,c;AACA,mC;AACA,4B;AACA,8D;AACA,c;AACA,mC;AACA,sC;AACA,4B;AACA,qD;AACA,c;AACA,mC;AACA,4B;AACA,2C;AACA,c;AACA,mC;AACA,4B;AACA,2B;AACA,c;AACA,mC;AACA,G;;AAEA,uE;AACA,qB;AACA,yB;AACA,wC;AACA,K;AACA,mC;AACA,qB;AACA,yC;AACA,K;AACA,mC;AACA,c;AACA,qB;AACA,oB;AACA,K;AACA,mC;AACA,qB;AACA,oB;AACA,K;AACA,mC;AACA,qB;AACA,8B;AACA,K;AACA,mC;AACA,qB;AACA,8B;AACA,K;AACA,mC;AACA,Y;AACA,qB;AACA,kD;AACA,K;AACA,mC;AACA,qB;AACA,gD;AACA,K;AACA,mC;AACA,qB;AACA,4D;AACA,K;AACA,mC;AACA,qB;AACA,0D;AACA,K;AACA,mC;AACA,sC;AACA,qB;AACA,uE;AACA,K;AACA,mC;AACA,qB;AACA,yE;AACA,K;AACA,mC;AACA,qB;AACA,+F;AACA,K;AACA,mC;AACA,G;;AAEA,uE;AACA,qB;AACA,wC;AACA,0C;AACA,oB;AACA,mC;AACA,oC;AACA,2C;AACA,oB;AACA,mC;AACA,c;AACA,oC;AACA,sB;AACA,oB;AACA,mC;AACA,oC;AACA,sB;AACA,oB;AACA,mC;AACA,oC;AACA,gC;AACA,oB;AACA,mC;AACA,oC;AACA,gC;AACA,oB;AACA,mC;AACA,Y;AACA,oC;AACA,oD;AACA,oB;AACA,mC;AACA,oC;AACA,kD;AACA,oB;AACA,mC;AACA,oC;AACA,8D;AACA,oB;AACA,mC;AACA,oC;AACA,4D;AACA,oB;AACA,mC;AACA,sC;AACA,oC;AACA,yE;AACA,oB;AACA,mC;AACA,oC;AACA,2E;AACA,oB;AACA,mC;AACA,oC;AACA,iG;AACA,oB;AACA,mC;AACA,G;;AAEA,uE;AACA,qB;AACA,gC;AACA,0C;AACA,c;AACA,mC;AACA,4B;AACA,2C;AACA,c;AACA,mC;AACA,c;AACA,4B;AACA,sB;AACA,c;AACA,mC;AACA,4B;AACA,sB;AACA,c;AACA,mC;AACA,4B;AACA,gC;AACA,c;AACA,mC;AACA,4B;AACA,gC;AACA,c;AACA,mC;;AAEA,4B;AACA,gB;AACA,c;AACA,mC;;AAEA,4B;AACA,gB;AACA,c;AACA,yE;AACA,mC;;AAEA,Y;AACA,4B;AACA,oD;AACA,c;AACA,mC;AACA,4B;AACA,kD;AACA,c;AACA,mC;AACA,4B;AACA,8D;AACA,c;AACA,mC;AACA,4B;AACA,4D;AACA,c;AACA,mC;AACA,sC;AACA,4B;AACA,yE;AACA,c;AACA,mC;AACA,4B;AACA,2E;AACA,c;AACA,mC;AACA,4B;AACA,iG;AACA,c;AACA,mC;AACA,G;;AAEA,sF;AACA,8B;AACA,gB;AACA,e;AACA,K;AACA,mC;AACA,G;;AAEA,sF;AACA,qC;AACA,iB;AACA,c;AACA,mC;AACA,G;;AAEA,sF;AACA,6C;AACA,kB;AACA,iB;AACA,oB;AACA,mC;AACA,G;;AAEA,sF;AACA,c;AACA,yB;AACA,0B;AACA,K;AACA,mC;;AAEA,qB;AACA,mC;AACA,K;AACA,mC;;AAEA,qB;AACA,kD;AACA,K;AACA,mC;;AAEA,oB;AACA,0B;AACA,2C;AACA,e;AACA,K;AACA,mC;;AAEA,c;AACA,qB;AACA,qB;AACA,K;AACA,mC;;AAEA,qB;AACA,2B;AACA,K;AACA,mC;;AAEA,qB;AACA,kC;AACA,K;AACA,mC;;AAEA,oB;AACA,0B;AACA,yD;AACA,e;AACA,K;AACA,mC;AACA,G;;AAEA,wF;AACA,c;AACA,yB;AACA,2B;AACA,K;AACA,mC;;AAEA,qB;AACA,oC;AACA,K;AACA,mC;;AAEA,S;AACA,qB;AACA,qD;AACA,K;AACA,mC;;AAEA,oB;AACA,0B;AACA,6C;AACA,e;AACA,K;AACA,mC;;AAEA,c;AACA,qB;AACA,qB;AACA,K;AACA,mC;;AAEA,qB;AACA,2B;AACA,K;AACA,mC;;AAEA,S;AACA,qB;AACA,qC;AACA,K;AACA,mC;;AAEA,oB;AACA,0B;AACA,4D;AACA,e;AACA,K;AACA,mC;AACA,G;;AAEA,qG;AACA,c;AACA,wC;AACA,4B;AACA,oB;AACA,mC;;AAEA,oC;AACA,qC;AACA,oB;AACA,mC;;AAEA,S;AACA,oC;AACA,oD;AACA,oB;AACA,mC;;AAEA,oB;AACA,yC;AACA,6C;AACA,iB;AACA,oB;AACA,mC;;AAEA,c;AACA,oC;AACA,uB;AACA,oB;AACA,mC;;AAEA,oC;AACA,6B;AACA,oB;AACA,mC;;AAEA,S;AACA,oC;AACA,oC;AACA,oB;AACA,mC;;AAEA,oB;AACA,yC;AACA,2D;AACA,iB;AACA,oB;AACA,mC;AACA,G;;AAEA,uG;AACA,c;AACA,wC;AACA,6B;AACA,oB;AACA,mC;;AAEA,oC;AACA,sC;AACA,oB;AACA,mC;;AAEA,S;AACA,oC;AACA,uD;AACA,oB;AACA,mC;;AAEA,oB;AACA,yC;AACA,+C;AACA,iB;AACA,oB;AACA,mC;;AAEA,c;AACA,oC;AACA,uB;AACA,oB;AACA,mC;;AAEA,oC;AACA,6B;AACA,oB;AACA,mC;;AAEA,S;AACA,oC;AACA,uC;AACA,oB;AACA,mC;;AAEA,oB;AACA,yC;AACA,8D;AACA,iB;AACA,oB;AACA,mC;AACA,G;;AAEA,6F;AACA,c;AACA,gC;AACA,4B;AACA,c;AACA,mC;;AAEA,4B;AACA,qC;AACA,c;AACA,mC;;AAEA,S;AACA,4B;AACA,oD;AACA,c;AACA,mC;;AAEA,oB;AACA,iC;AACA,6B;AACA,c;AACA,mC;;AAEA,iC;AACA,6B;AACA,c;AACA,mC;;AAEA,c;AACA,4B;AACA,uB;AACA,c;AACA,mC;;AAEA,4B;AACA,6B;AACA,c;AACA,mC;;AAEA,4B;AACA,oC;AACA,c;AACA,mC;;AAEA,G;;AAEA,+F;AACA,c;AACA,gC;AACA,6B;AACA,c;AACA,mC;;AAEA,4B;AACA,sC;AACA,c;AACA,mC;;AAEA,S;AACA,4B;AACA,uD;AACA,c;AACA,mC;;AAEA,oB;AACA,iC;AACA,+B;AACA,c;AACA,mC;;AAEA,iC;AACA,+B;AACA,c;AACA,mC;;AAEA,c;AACA,4B;AACA,uB;AACA,c;AACA,mC;;AAEA,4B;AACA,6B;AACA,c;AACA,mC;;AAEA,4B;AACA,uC;AACA,c;AACA,mC;AACA,G;;AAEA,iE;AACA,yB;AACA,4B;AACA,yB;AACA,mC;;AAEA,yB;AACA,sB;AACA,yB;AACA,mC;;AAEA,yB;AACA,qB;AACA,gB;AACA,K;AACA,yB;AACA,mC;;AAEA,gC;AACA,qB;AACA,gB;AACA,K;AACA,yB;AACA,mC;;AAEA,gC;AACA,+B;AACA,yB;AACA,mC;;AAEA,gC;AACA,6B;AACA,yB;AACA,mC;;AAEA,iC;AACA,+B;AACA,yB;AACA,mC;;AAEA,gC;AACA,wB;AACA,yB;AACA,mC;AACA,G;;AAEA,+F;AACA,0B;AACA,yB;AACA,+B;AACA,K;AACA,mC;AACA,G;;AAEA,8G;AACA,yC;AACA,2B;AACA,iC;AACA,oB;AACA,mC;AACA,G;;AAEA,sG;AACA,iC;AACA,2B;AACA,iC;AACA,c;;AAEA,mC;AACA,G;;AAEA,iG;AACA,0B;AACA,yB;AACA,gC;AACA,K;AACA,mC;AACA,2D;AACA,G;;AAEA,gH;AACA,yC;AACA,2B;AACA,kC;AACA,oB;AACA,mC;AACA,2D;AACA,G;;AAEA,wG;AACA,iC;AACA,2B;AACA,kC;AACA,c;AACA,mC;AACA,2D;AACA,G;;AAEA,2E;AACA,qC;AACA,oD;AACA,4E;AACA,O;AACA,mC;AACA,kG;AACA,uB;AACA,4C;AACA,G;AACA,G;;AAEA,wE;AACA,O;AACA,yC;AACA,a;AACA,qB;AACA,oB;AACA,O;AACA,O;AACA,uB;AACA,sC;AACA,G;;AAEA,8B;AACA,mC;AACA,K;;AAEA,O;AACA,qC;AACA,a;AACA,qB;AACA,oB;AACA,O;AACA,O;AACA,uB;AACA,wG;AACA,G;AACA,G;;AAEA,gE;;AAEA,qC;AACA,mB;AACA,c;AACA,mC;;AAEA,iC;AACA,+B;AACA,c;AACA,mC;;AAEA,iC;AACA,2C;AACA,c;AACA,mC;;AAEA,iC;AACA,6C;AACA,c;AACA,mC;;AAEA,iC;AACA,iD;AACA,c;AACA,mC;;AAEA,iC;AACA,yD;AACA,c;AACA,mC;;AAEA,iC;AACA,0E;AACA,c;AACA,mC;;AAEA,iC;AACA,sE;AACA,c;AACA,mC;;AAEA,kC;AACA,4B;AACA,c;AACA,mC;;AAEA,kC;AACA,0C;AACA,c;AACA,mC;;AAEA,kC;AACA,4C;AACA,c;AACA,mC;;AAEA,kC;AACA,kF;AACA,c;AACA,mC;;AAEA,kC;AACA,oF;AACA,c;AACA,mC;;AAEA,kC;AACA,+E;AACA,c;AACA,mC;;AAEA,sC;AACA,4B;AACA,c;AACA,mC;;AAEA,sC;AACA,0C;AACA,c;AACA,mC;;AAEA,sC;AACA,4C;AACA,c;AACA,mC;;AAEA,sC;AACA,kF;AACA,c;AACA,mC;;AAEA,sC;AACA,oF;AACA,c;AACA,mC;;AAEA,sC;AACA,+E;AACA,c;AACA,mC;AACA,G;;AAEA,iE;AACA,oC;AACA,0B;AACA,2C;AACA,oC;AACA,uB;AACA,2B;AACA,0B;AACA,sB;AACA,+B;AACA,6C;AACA,qC;AACA,qB;AACA,uB;AACA,M;AACA,qB;AACA,4B;AACA,K;AACA,K;AACA,2C;AACA,2C;AACA,G;;AAEA,+E;;AAEA,oC;AACA,mC;AACA,mC;AACA,G;;AAEA,Y;;AAEA,gD;AACA,qE;AACA,6C;AACA,kF;AACA,yB;AACA,qC;AACA,wB;AACA,2B;;AAEA,sB;;AAEA,gD;AACA,4C;AACA,uD;;AAEA,gD;AACA,e;AACA,e;AACA,0B;AACA,I;AACA,2D;;AAEA,Q;;AAEA,gD;AACA,qF;AACA,6C;AACA,kG;AACA,yB;AACA,qD;AACA,wB;AACA,2C;;AAEA,U;;AAEA,gD;AACA,6D;AACA,6C;AACA,0E;;AAEA,gB;;AAEA,gD;AACA,qG;AACA,6C;AACA,kH;AACA,yB;AACA,qE;;AAEA,Q;;AAEA,gD;AACA,mD;AACA,6C;AACA,6D;AACA,yB;AACA,qD;;AAEA,a;;AAEA,gD;AACA,uF;AACA,6C;AACA,iG;AACA,yB;AACA,yF;;AAEA,uB;;AAEA,gD;AACA,yH;AACA,6C;AACA,oJ;AACA,yB;AACA,2H;;AAEA,S;;AAEA,gD;AACA,+E;AACA,6C;AACA,yF;AACA,yB;AACA,iF;;AAEA,mB;;AAEA,gD;AACA,iH;AACA,6C;AACA,4I;AACA,yB;AACA,mH;;AAEA,S;;AAEA,gD;AACA,+E;AACA,6C;AACA,yF;AACA,yB;AACA,iF;;AAEA,Q;;AAEA,gD;AACA,6E;AACA,6C;AACA,uF;AACA,yB;AACA,+E;;AAEA,Y;;AAEA,qG;AACA,uG;;AAEA,8D;;AAEA,2G;AACA,6G;AACA,qE;AACA,U;AACA,Y;AACA,gD;AACA,oD;AACA,M;AACA,gD;AACA,M;AACA,Y;AACA,uD;AACA,oD;AACA,K;AACA,K;;AAEA,G;;AAEA,4D;AACA,uC;AACA,W;AACA,mB;AACA,c;AACA,M;AACA,c;AACA,mB;AACA,M;AACA,gB;AACA,gB;AACA,M;AACA,W;AACA,sB;AACA,K;AACA,K;;AAEA,qC;AACA,gB;AACA,uB;AACA,0B;AACA,oD;AACA,+C;AACA,I;;AAEA,2B;AACA,0D;AACA,mC;;AAEA,wB;AACA,sC;AACA,mC;;AAEA,iB;AACA,uB;AACA,kB;AACA,a;AACA,e;AACA,I;;AAEA,2B;AACA,2D;AACA,mC;;AAEA,wB;AACA,uC;AACA,mC;;AAEA,mC;AACA,W;AACA,kB;AACA,M;AACA,c;AACA,kB;AACA,M;AACA,gB;AACA,kB;AACA,M;AACA,W;AACA,kB;AACA,K;AACA,K;;AAEA,2B;AACA,0D;AACA,mC;;AAEA,wB;AACA,sC;AACA,mC;AACA,G;;AAEA,8D;AACA,yC;AACA,0C;;AAEA,gC;AACA,qB;AACA,wB;AACA,K;;AAEA,iC;AACA,Y;AACA,iB;AACA,M;AACA,Y;AACA,mB;AACA,M;AACA,kC;AACA,mC;AACA,K;;AAEA,4B;;AAEA,4F;AACA,8F;AACA,0G;AACA,gG;AACA,kG;AACA,sG;AACA,kH;AACA,G;;AAEA,sD;AACA,c;AACA,2H;AACA,gK;;AAEA,W;AACA,iD;AACA,gI;;AAEA,Y;AACA,uC;AACA,gC;AACA,Q;AACA,0I;AACA,G;;AAEA,kE;;AAEA,W;AACA,yB;AACA,kC;AACA,sC;AACA,0C;AACA,wC;AACA,K;;AAEA,qC;AACA,U;AACA,mB;AACA,c;AACA,a;AACA,Y;AACA,O;AACA,K;AACA,K;;AAEA,mC;AACA,4B;AACA,mC;;AAEA,sC;AACA,kD;;AAEA,4B;AACA,mC;;AAEA,kC;AACA,iD;;AAEA,4B;AACA,mC;;AAEA,kC;AACA,kD;;AAEA,4B;AACA,mC;;AAEA,6B;AACA,uB;AACA,2B;AACA,+B;AACA,mC;AACA,iC;AACA,K;;AAEA,+B;AACA,4B;AACA,mC;;AAEA,kC;AACA,2C;;AAEA,4B;AACA,mC;;AAEA,kC;AACA,0C;;AAEA,4B;AACA,mC;;AAEA,kC;AACA,2C;;AAEA,4B;AACA,mC;AACA,G;;AAEA,wD;AACA,iC;AACA,a;AACA,kB;AACA,M;AACA,c;AACA,kB;AACA,M;AACA,kB;AACA,kB;AACA,K;AACA,K;;AAEA,wC;AACA,kB;AACA,c;AACA,uC;;AAEA,G;;AAEA,wD;AACA,iC;AACA,gB;AACA,mB;AACA,0B;AACA,oB;AACA,M;AACA,e;AACA,mB;AACA,yB;AACA,qB;AACA,8C;AACA,2B;AACA,iF;AACA,yB;AACA,kB;AACA,wB;AACA,W;AACA,S;AACA,qC;AACA,+D;AACA,6C;AACA,yB;AACA,kB;AACA,wB;AACA,W;AACA,S;AACA,mD;AACA,O;AACA,K;AACA,K;;AAEA,iC;AACA,qB;AACA,K;AACA,4D;;AAEA,6B;AACA,sB;AACA,gB;AACA,K;AACA,4D;;AAEA,6B;AACA,sB;AACA,oB;AACA,K;AACA,uC;;AAEA,oC;AACA,uB;AACA,c;AACA,4D;;AAEA,oC;AACA,wB;AACA,kB;AACA,c;AACA,4D;;AAEA,oC;AACA,wB;AACA,sB;AACA,c;AACA,uC;;AAEA,G;;AAEA,kE;;AAEA,6B;AACA,K;AACA,U;AACA,qB;AACA,Q;AACA,U;AACA,oB;AACA,O;AACA,M;AACA,K;AACA,U;AACA,oB;AACA,Q;AACA,U;AACA,oB;AACA,O;AACA,K;AACA,K;;AAEA,0B;AACA,Q;AACA,mB;AACA,M;AACA,Q;AACA,kB;AACA,M;AACA,Q;AACA,kB;AACA,M;AACA,Q;AACA,kB;AACA,K;AACA,wC;;AAEA,oB;AACA,8B;AACA,2C;AACA,oC;;AAEA,G;;AAEA,kE;;AAEA,6B;AACA,Q;AACA,mB;AACA,M;AACA,Q;AACA,oB;AACA,K;AACA,K;;AAEA,kC;AACA,U;AACA,oB;AACA,Q;AACA,U;AACA,oB;AACA,O;AACA,Q;;AAEA,0B;AACA,Q;AACA,mB;AACA,M;AACA,Q;AACA,iB;AACA,M;AACA,Y;AACA,mB;AACA,oB;AACA,M;AACA,Q;AACA,kB;AACA,M;AACA,Q;AACA,kB;AACA,K;AACA,wC;;AAEA,oB;AACA,8B;AACA,2C;AACA,oC;;AAEA,G;;AAEA,gG;;AAEA,6B;AACA,Q;AACA,mB;AACA,M;AACA,Q;AACA,oB;AACA,K;AACA,K;;AAEA,kC;AACA,U;AACA,oB;AACA,Q;AACA,U;AACA,sB;AACA,Q;AACA,U;AACA,oB;AACA,Q;AACA,U;AACA,oB;AACA,O;AACA,Q;;AAEA,0B;AACA,Q;AACA,kB;AACA,M;AACA,Q;AACA,kB;AACA,oB;AACA,M;AACA,Y;AACA,mB;AACA,qB;AACA,oB;AACA,M;AACA,Q;AACA,kB;AACA,M;AACA,Q;AACA,kB;AACA,K;AACA,wC;;AAEA,oB;AACA,8B;AACA,2C;AACA,oC;;AAEA,G;;AAEA,0D;;AAEA,oC;AACA,gC;AACA,yB;AACA,G;;AAEA,U;AACA,qE;AACA,gD;AACA,I;;AAEA,U;AACA,0C;AACA,iD;AACA,I;;AAEA,kD;AACA,sB;AACA,uE;AACA,mC;AACA,kH;;AAEA,gD;AACA,4C;AACA,0C;AACA,mK;;AAEA,6C;AACA,0C;AACA,4J;;AAEA,6B;AACA,U;AACA,mB;AACA,oB;AACA,M;AACA,U;AACA,oB;AACA,qB;AACA,6B;AACA,sC;AACA,qC;AACA,wC;AACA,oC;AACA,qC;AACA,oC;AACA,uC;AACA,uC;AACA,qC;AACA,oC;AACA,uC;AACA,O;AACA,K;AACA,K;AACA,e;;AAEA,8B;AACA,U;AACA,mB;AACA,oB;AACA,M;AACA,U;AACA,oB;AACA,qB;AACA,6B;AACA,sC;AACA,qC;AACA,wC;AACA,oC;AACA,oC;AACA,uC;AACA,uC;AACA,uC;AACA,oC;AACA,uC;AACA,uC;AACA,O;AACA,K;AACA,K;AACA,4B;AACA,E;AACA,8B;AACA,U;AACA,mB;AACA,oB;AACA,M;AACA,U;AACA,oB;AACA,qB;AACA,6B;AACA,qC;AACA,qC;AACA,wC;AACA,oC;AACA,oC;AACA,uC;AACA,uC;AACA,uC;AACA,oC;AACA,uC;AACA,uC;AACA,O;AACA,K;AACA,K;AACA,uC;AACA,E;AACA,8B;AACA,U;AACA,mB;AACA,oB;AACA,M;AACA,U;AACA,oB;AACA,qB;AACA,6B;AACA,qC;AACA,sC;AACA,wC;AACA,oC;AACA,qC;AACA,oC;AACA,uC;AACA,uC;AACA,qC;AACA,oC;AACA,uC;AACA,qB;AACA,O;AACA,K;AACA,K;AACA,yB;AACA,iB;AACA,sB;AACA,E;AACA,8B;AACA,U;AACA,mB;AACA,oB;AACA,M;AACA,U;AACA,oB;AACA,qB;AACA,6B;AACA,qC;AACA,sC;AACA,0C;AACA,oC;AACA,qC;AACA,oC;AACA,uC;AACA,uC;AACA,qC;AACA,oC;AACA,uC;AACA,O;AACA,K;AACA,K;AACA,iC;AACA,iB;AACA,wC;AACA,E;AACA,8B;AACA,U;AACA,mB;AACA,oB;AACA,M;AACA,U;AACA,oB;AACA,qB;AACA,6B;AACA,qC;AACA,sC;AACA,0C;AACA,oC;AACA,oC;AACA,uC;AACA,yC;AACA,uC;AACA,oC;AACA,uC;AACA,yC;AACA,oB;AACA,O;AACA,K;AACA,K;AACA,2C;AACA,iB;AACA,qD;AACA,E;AACA,8B;AACA,U;AACA,mB;AACA,oB;AACA,M;AACA,U;AACA,oB;AACA,qB;AACA,6B;AACA,sC;AACA,qC;AACA,wC;AACA,oC;AACA,qC;AACA,oC;AACA,uC;AACA,uC;AACA,qC;AACA,oC;AACA,uC;AACA,4B;AACA,O;AACA,K;AACA,K;AACA,W;AACA,iB;AACA,uC;;AAEA,G;;AAEA,6D;;AAEA,oC;AACA,mC;AACA,yB;AACA,G;;AAEA,U;AACA,a;AACA,qD;AACA,I;;AAEA,U;AACA,oC;AACA,iE;AACA,I;;AAEA,U;AACA,2C;AACA,+C;AACA,I;;AAEA,U;AACA,kD;AACA,sD;AACA,I;;AAEA,U;AACA,oD;AACA,iE;AACA,I;;AAEA,U;AACA,kE;AACA,+E;AACA,I;;AAEA,mC;AACA,U;AACA,8C;AACA,8C;AACA,4B;AACA,I;;AAEA,G;;AAEA,+D;AACA,mC;AACA,8D;AACA,wB;AACA,mB;AACA,oE;AACA,2E;AACA,G;;AAEA,gE;AACA,mC;AACA,uE;AACA,uD;AACA,oD;AACA,2E;;AAEA,sD;AACA,2E;;AAEA,qD;AACA,2E;AACA,G;;AAEA,yD;AACA,8B;AACA,oF;AACA,G;;AAEA,4B;AACA,+B;AACA,mC;AACA,kC;AACA,iC;AACA,mB;AACA,0B;AACA,6B;AACA,iC;AACA,gC;AACA,+B;AACA,iC;AACA,mC;AACA,wC;AACA,sC;AACA,4B;AACA,+B;AACA,gC;AACA,kC;AACA,qC;AACA,uC;AACA,8B;AACA,iC;AACA,kC;AACA,oC;AACA,uC;AACA,yC;AACA,G;;AAEA,8D;AACA,sC;AACA,6D;AACA,+D;AACA,wB;AACA,iC;AACA,oC;AACA,4B;AACA,gC;AACA,0D;AACA,sD;AACA,qD;AACA,sB;AACA,G;;AAEA,kE;AACA,0C;AACA,6D;AACA,+D;AACA,wB;AACA,iC;AACA,oC;AACA,2B;AACA,+B;AACA,yD;AACA,qD;AACA,qD;AACA,qB;AACA,G;;AAEA,+D;AACA,uC;AACA,6D;AACA,+D;AACA,uB;AACA,uB;AACA,2B;AACA,0D;AACA,G;;AAEA,mE;AACA,2C;AACA,6D;AACA,+D;AACA,uB;AACA,sB;AACA,0B;AACA,oD;AACA,G;;AAEA,qE;AACA,mC;AACA,6D;AACA,+D;AACA,uB;AACA,0B;AACA,2B;AACA,uB;AACA,oD;AACA,0D;AACA,gD;AACA,gD;AACA,gB;AACA,G;;AAEA,6D;AACA,qC;AACA,6D;AACA,+D;AACA,uB;AACA,0B;AACA,2B;AACA,uB;AACA,qD;AACA,0D;AACA,iD;AACA,gD;AACA,iB;AACA,G;;AAEA,6D;AACA,qC;AACA,6D;AACA,+D;AACA,uB;AACA,2B;AACA,2B;AACA,uB;AACA,oD;AACA,0D;AACA,gD;AACA,gD;AACA,gB;AACA,G;;AAEA,E;AACA,Y;AACA,G;;;;;;;;;;;;;;;;;;;AC9uHA,gC;AACA,kC;AACA,kC;AACA,E;;AAEA,8B;AACA,kC;AACA,0B;AACA,E;;AAEA,yD;AACA,oB;AACA,kB;AACA,yB;AACA,+B;AACA,iC;AACA,+F;AACA,G;;AAEA,qB;AACA,S;AACA,a;AACA,kB;AACA,oB;AACA,c;AACA,c;AACA,kB;AACA,8B;AACA,gC;AACA,kB;AACA,uB;AACA,yB;AACA,mB;AACA,mB;AACA,uB;AACA,mC;AACA,qC;AACA,iC;AACA,6C;AACA,+C;;AAEA,G;;AAEA,mD;AACA,oB;AACA,mC;AACA,2B;AACA,+B;AACA,iC;AACA,mC;AACA,yG;AACA,G;;AAEA,qB;AACA,0B;AACA,mB;AACA,2B;AACA,qC;AACA,yC;AACA,6B;AACA,6B;AACA,8C;AACA,yD;AACA,sE;AACA,iF;AACA,0E;AACA,qF;AACA,oC;AACA,8C;AACA,kD;AACA,sC;AACA,sC;AACA,uD;AACA,kE;AACA,+E;AACA,0F;AACA,mF;AACA,8F;AACA,qE;AACA,sF;AACA,6F;AACA,8G;AACA,iG;AACA,kH;AACA,G;;AAEA,qE;AACA,oB;AACA,oC;AACA,kC;AACA,qC;AACA,+B;AACA,+C;AACA,mC;AACA,8G;AACA,G;;AAEA,sB;AACA,c;AACA,c;AACA,gB;;AAEA,0B;AACA,c;AACA,c;AACA,M;AACA,c;AACA,e;AACA,E;AACA,qC;AACA,c;AACA,U;AACA,mB;AACA,K;AACA,gB;AACA,E;AACA,qB;AACA,c;AACA,U;AACA,oB;AACA,e;AACA,K;AACA,M;AACA,U;AACA,mB;AACA,K;AACA,oB;AACA,G;;AAEA,kE;AACA,oB;AACA,oC;AACA,kC;AACA,4C;AACA,+B;AACA,mC;AACA,mC;AACA,4F;AACA,G;AACA,E;AACA,2D;;AAEA,yD;AACA,E;AACA,6C;AACA,E;AACA,8C;AACA,E;AACA,+D;AACA,E;AACA,wD;AACA,E;AACA,sD;;AAEA,G;;AAEA,4D;AACA,oB;AACA,qC;AACA,kC;AACA,uC;AACA,+B;AACA,qC;AACA,mC;AACA,oE;AACA,G;AACA,E;AACA,6E;AACA,E;AACA,+E;AACA,E;AACA,qE;AACA,E;AACA,mF;AACA,E;AACA,+E;AACA,E;AACA,uE;AACA,E;AACA,uE;AACA,E;AACA,8E;AACA,E;AACA,iF;;AAEA,G;;AAEA,6D;AACA,oB;AACA,uC;AACA,uD;AACA,mC;AACA,mC;AACA,oE;AACA,G;;AAEA,+B;AACA,gC;AACA,wC;AACA,yC;AACA,6C;AACA,8C;AACA,G;;AAEA,W;AACA,sB;AACA,qB;AACA,4C;AACA,uB;AACA,oB;AACA,oB;AACA,0B;AACA,gB;AACA,a;AACA,mB;AACA,6B;AACA,0C;AACA,c;AACA,2B;AACA,oB;AACA,c;AACA,gB;AACA,uB","sourcesContent":["/*\n * BEGIN SETUP FOR TESTS\n */\n\n//SimpleSchema.debug = true;\n\n// Custom type for custom type checking\nAddress = function(city, state) {\n  this.city = city;\n  this.state = state;\n};\n\nAddress.prototype = {\n  constructor: Address,\n  toString: function() {\n    return this.city + ', ' + this.state;\n  },\n  clone: function() {\n    return new Address(this.city, this.state);\n  },\n  equals: function(other) {\n    if (!(other instanceof Address))\n      return false;\n    return EJSON.stringify(this) === EJSON.stringify(other);\n  },\n  typeName: function() {\n    return \"Address\";\n  },\n  toJSONValue: function() {\n    return {\n      city: this.city,\n      state: this.state\n    };\n  }\n};\n\nvar ssr = new SimpleSchema({\n  requiredString: {\n    type: String\n  },\n  requiredBoolean: {\n    type: Boolean\n  },\n  requiredNumber: {\n    type: Number\n  },\n  requiredDate: {\n    type: Date\n  },\n  requiredEmail: {\n    type: String,\n    regEx: SchemaRegEx.Email\n  },\n  requiredUrl: {\n    type: String,\n    regEx: SchemaRegEx.Url\n  },\n  requiredObject: {\n    type: Object\n  },\n  'requiredObject.requiredNumber': {\n    type: Number\n  },\n  optionalObject: {\n    type: Object,\n    optional: true\n  },\n  'optionalObject.requiredString': {\n    type: String\n  },\n  anOptionalOne: {\n    type: String,\n    optional: true,\n    min: 20\n  }\n});\n\nssr.messages({\n  \"regEx requiredEmail\": \"[label] is not a valid e-mail address\",\n  \"regEx requiredUrl\": \"[label] is not a valid URL\"\n});\n\nvar ss = new SimpleSchema({\n  string: {\n    type: String,\n    optional: true\n  },\n  minMaxString: {\n    type: String,\n    optional: true,\n    min: 10,\n    max: 20,\n    regEx: /^[a-z0-9_]+$/\n  },\n  minMaxStringArray: {\n    type: [String],\n    optional: true,\n    min: 10,\n    max: 20,\n    minCount: 1,\n    maxCount: 2\n  },\n  allowedStrings: {\n    type: String,\n    optional: true,\n    allowedValues: [\"tuna\", \"fish\", \"salad\"]\n  },\n  valueIsAllowedString: {\n    type: String,\n    optional: true,\n    valueIsAllowed: function(val) {\n      return val === void 0 || val === null || val === \"pumpkin\";\n    }\n  },\n  allowedStringsArray: {\n    type: [String],\n    optional: true,\n    allowedValues: [\"tuna\", \"fish\", \"salad\"]\n  },\n  boolean: {\n    type: Boolean,\n    optional: true\n  },\n  booleanArray: {\n    type: [Boolean],\n    optional: true\n  },\n  number: {\n    type: Number,\n    optional: true\n  },\n  'sub.number': {\n    type: Number,\n    optional: true\n  },\n  minMaxNumber: {\n    type: Number,\n    optional: true,\n    min: 10,\n    max: 20\n  },\n  minZero: {\n    type: Number,\n    optional: true,\n    min: 0\n  },\n  maxZero: {\n    type: Number,\n    optional: true,\n    max: 0\n  },\n  minMaxNumberCalculated: {\n    type: Number,\n    optional: true,\n    min: function() {\n      return 10;\n    },\n    max: function() {\n      return 20;\n    }\n  },\n  allowedNumbers: {\n    type: Number,\n    optional: true,\n    allowedValues: [1, 2, 3]\n  },\n  valueIsAllowedNumber: {\n    type: Number,\n    optional: true,\n    valueIsAllowed: function(val) {\n      return val === void 0 || val === null || val === 1;\n    }\n  },\n  allowedNumbersArray: {\n    type: [Number],\n    optional: true,\n    allowedValues: [1, 2, 3]\n  },\n  decimal: {\n    type: Number,\n    optional: true,\n    decimal: true\n  },\n  date: {\n    type: Date,\n    optional: true\n  },\n  dateArray: {\n    type: [Date],\n    optional: true\n  },\n  minMaxDate: {\n    type: Date,\n    optional: true,\n    min: (new Date(Date.UTC(2013, 0, 1))),\n    max: (new Date(Date.UTC(2013, 11, 31)))\n  },\n  minMaxDateCalculated: {\n    type: Date,\n    optional: true,\n    min: function() {\n      return (new Date(Date.UTC(2013, 0, 1)));\n    },\n    max: function() {\n      return (new Date(Date.UTC(2013, 11, 31)));\n    }\n  },\n  email: {\n    type: String,\n    regEx: SchemaRegEx.Email,\n    optional: true\n  },\n  url: {\n    type: String,\n    regEx: SchemaRegEx.Url,\n    optional: true\n  },\n  customObject: {\n    type: Address,\n    optional: true,\n    blackbox: true\n  },\n  blackBoxObject: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n});\n\nss.messages({\n  minCount: \"blah\",\n  \"regEx email\": \"[label] is not a valid e-mail address\",\n  \"regEx url\": \"[label] is not a valid URL\"\n});\n\nvar pss = new SimpleSchema({\n  password: {\n    type: String\n  },\n  confirmPassword: {\n    type: String,\n    custom: function() {\n      if (this.value !== this.field('password').value) {\n        return \"passwordMismatch\";\n      }\n    }\n  }\n});\n\nvar friends = new SimpleSchema({\n  name: {\n    type: String,\n    optional: true\n  },\n  friends: {\n    type: [Object],\n    minCount: 1\n  },\n  'friends.$.name': {\n    type: String,\n    max: 3\n  },\n  'friends.$.type': {\n    type: String,\n    allowedValues: [\"best\", \"good\", \"bad\"]\n  },\n  'friends.$.a.b': {\n    type: Number,\n    optional: true\n  },\n  enemies: {\n    type: [Object]\n  },\n  'enemies.$.name': {\n    type: String\n  },\n  'enemies.$.traits': {\n    type: [Object],\n    optional: true\n  },\n  'enemies.$.traits.$.name': {\n    type: String\n  },\n  'enemies.$.traits.$.weight': {\n    type: Number,\n    decimal: true\n  }\n});\n\nvar autoValues = new SimpleSchema({\n  name: {\n    type: String\n  },\n  someDefault: {\n    type: Number,\n    autoValue: function() {\n      if (!this.isSet) {\n        return 5;\n      }\n    }\n  },\n  updateCount: {\n    type: Number,\n    autoValue: function() {\n      if (!this.operator) {\n        return 0;\n      } else {\n        return {$inc: 1};\n      }\n    }\n  },\n  content: {\n    type: String,\n    optional: true\n  },\n  firstWord: {\n    type: String,\n    optional: true,\n    autoValue: function() {\n      var content = this.field(\"content\");\n      if (content.isSet) {\n        return content.value.split(' ')[0];\n      } else {\n        this.unset();\n      }\n    }\n  },\n  updatesHistory: {\n    type: [Object],\n    optional: true,\n    autoValue: function() {\n      var content = this.field(\"content\");\n      if (content.isSet) {\n        if (!this.operator) {\n          return [{\n              date: new Date,\n              content: content.value\n            }];\n        } else {\n          return {\n            $push: {\n              date: new Date,\n              content: content.value\n            }\n          };\n        }\n      }\n    }\n  },\n  'updatesHistory.$.date': {\n    type: Date,\n    optional: true\n  },\n  'updatesHistory.$.content': {\n    type: String,\n    optional: true\n  },\n  avArrayOfObjects: {\n    type: [Object],\n    optional: true\n  },\n  'avArrayOfObjects.$.a': {\n    type: String\n  },\n  'avArrayOfObjects.$.foo': {\n    type: String,\n    autoValue: function () {\n      return \"bar\";\n    }\n  }\n});\n\nvar defaultValues = new SimpleSchema({\n  name: {\n    type: String,\n    defaultValue: \"Test\",\n    optional: true\n  },\n  'a.b': {\n    type: String,\n    defaultValue: \"Test\",\n    optional: true\n  },\n  'b.$.a': {\n    type: String,\n    defaultValue: \"Test\",\n    optional: true\n  },\n  strVals: {\n    type: [String],\n    defaultValue: [],\n    optional: true\n  }\n});\n\nvar optCust = new SimpleSchema({\n  foo: {\n    type: String,\n    optional: true,\n    custom: function() {\n      return \"custom\";\n    }\n  }\n});\n\nvar reqCust = new SimpleSchema({\n  a: {\n    type: [Object],\n    custom: function () {\n      // Just adding custom to trigger extra validation\n    }\n  },\n  b: {\n    type: [Object],\n    custom: function () {\n      // Just adding custom to trigger extra validation\n    }\n  }\n});\n\n/*\n * END SETUP FOR TESTS\n */\n\n/*\n * BEGIN HELPER METHODS\n */\n\nfunction validate(ss, doc, isModifier, isUpsert, skipClean) {\n  //we will filter, type convert, and validate everything\n  //so that we can be sure the filtering and type converting are not invalidating\n  //documents that should be valid\n  if (!skipClean) {\n    doc = ss.clean(doc);\n  }\n\n  var context = ss.newContext();\n  context.validate(doc, {modifier: isModifier, upsert: isUpsert});\n  return context;\n}\n\nfunction validateNoClean(ss, doc, isModifier, isUpsert) {\n  return validate(ss, doc, isModifier, isUpsert, true);\n}\n\n/*\n * END HELPER METHODS\n */\n\n/*\n * BEGIN TESTS\n */\n\nTinytest.add(\"SimpleSchema - Required Checks - Insert - Valid\", function(test) {\n  var sc = validate(ssr, {\n    requiredString: \"test\",\n    requiredBoolean: true,\n    requiredNumber: 1,\n    requiredDate: (new Date()),\n    requiredEmail: \"test123@sub.example.edu\",\n    requiredUrl: \"http://google.com\",\n    requiredObject: {\n      requiredNumber: 1\n    },\n    optionalObject: {\n      requiredString: \"test\"\n    }\n  });\n  test.equal(sc.invalidKeys(), []);\n\n  var sc = validate(ssr, {\n    requiredString: \"test\",\n    requiredBoolean: true,\n    requiredNumber: 1,\n    requiredDate: (new Date()),\n    requiredEmail: \"test123@sub.example.edu\",\n    requiredUrl: \"http://google.com\",\n    requiredObject: {\n      requiredNumber: 1\n    },\n  });\n  test.equal(sc.invalidKeys(), []);\n});\n\nTinytest.add(\"SimpleSchema - Required Checks - Insert - Invalid\", function(test) {\n  var sc = validate(ssr, {});\n  test.length(sc.invalidKeys(), 8);\n\n  sc = validate(ssr, {\n    requiredString: null,\n    requiredBoolean: null,\n    requiredNumber: null,\n    requiredDate: null,\n    requiredEmail: null,\n    requiredUrl: null,\n    requiredObject: null,\n    optionalObject: {\n      requiredString: null\n    }\n  });\n  test.length(sc.invalidKeys(), 9);\n\n  sc = validate(ssr, {\n    requiredString: null,\n    requiredBoolean: null,\n    requiredNumber: null,\n    requiredDate: null,\n    requiredEmail: null,\n    requiredUrl: null,\n    requiredObject: null,\n    optionalObject: {}\n  });\n  test.length(sc.invalidKeys(), 9);\n\n  sc = validate(ssr, {\n    requiredString: null,\n    requiredBoolean: null,\n    requiredNumber: null,\n    requiredDate: null,\n    requiredEmail: null,\n    requiredUrl: null,\n    requiredObject: null,\n    optionalObject: null\n  });\n  test.length(sc.invalidKeys(), 8);\n\n  sc = validate(ssr, {\n    requiredString: void 0,\n    requiredBoolean: void 0,\n    requiredNumber: void 0,\n    requiredDate: void 0,\n    requiredEmail: void 0,\n    requiredUrl: void 0,\n    requiredObject: void 0,\n    optionalObject: {\n      requiredString: void 0\n    }\n  });\n  test.length(sc.invalidKeys(), 9);\n\n  sc = validate(ssr, {\n    requiredString: \"\",\n    requiredBoolean: null,\n    requiredNumber: null,\n    requiredDate: null,\n    requiredEmail: null,\n    requiredUrl: null,\n    requiredObject: null,\n    optionalObject: {\n      requiredString: \"\"\n    }\n  });\n  test.length(sc.invalidKeys(), 9);\n\n  sc = validate(ssr, {\n    requiredString: \"   \",\n    requiredBoolean: null,\n    requiredNumber: null,\n    requiredDate: null,\n    requiredEmail: null,\n    requiredUrl: null,\n    requiredObject: null,\n    optionalObject: {\n      requiredString: \"   \"\n    }\n  });\n  test.length(sc.invalidKeys(), 9);\n\n  //array of objects\n  sc = validate(friends, {\n    friends: [{name: 'Bob'}],\n    enemies: [{}]\n  });\n  test.length(sc.invalidKeys(), 2);\n});\n\n/*\n * Upserts should be validated more like inserts because they might be an insert\n */\n\nTinytest.add(\"SimpleSchema - Required Checks - Upsert - Valid - $set\", function(test) {\n  var sc = validate(ssr, {$set: {\n      requiredString: \"test\",\n      requiredBoolean: true,\n      requiredNumber: 1,\n      requiredDate: (new Date()),\n      requiredEmail: \"test123@sub.example.edu\",\n      requiredUrl: \"http://google.com\",\n      requiredObject: {\n        requiredNumber: 1\n      },\n      optionalObject: {\n        requiredString: \"test\"\n      }\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ssr, {$set: {\n      requiredString: \"test\",\n      requiredBoolean: true,\n      requiredNumber: 1,\n      requiredDate: (new Date()),\n      requiredEmail: \"test123@sub.example.edu\",\n      requiredUrl: \"http://google.com\",\n      requiredObject: {\n        requiredNumber: 1\n      },\n      'optionalObject.requiredString': \"test\"\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n});\n\nTinytest.add(\"SimpleSchema - Required Checks - Upsert - Valid - $setOnInsert\", function(test) {\n  var sc = validate(ssr, {$setOnInsert: {\n      requiredString: \"test\",\n      requiredBoolean: true,\n      requiredNumber: 1,\n      requiredDate: (new Date()),\n      requiredEmail: \"test123@sub.example.edu\",\n      requiredUrl: \"http://google.com\",\n      requiredObject: {\n        requiredNumber: 1\n      },\n      optionalObject: {\n        requiredString: \"test\"\n      }\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ssr, {$setOnInsert: {\n      requiredString: \"test\",\n      requiredBoolean: true,\n      requiredNumber: 1,\n      requiredDate: (new Date()),\n      requiredEmail: \"test123@sub.example.edu\",\n      requiredUrl: \"http://google.com\",\n      requiredObject: {\n        requiredNumber: 1\n      },\n      'optionalObject.requiredString': \"test\"\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n});\n\nTinytest.add(\"SimpleSchema - Required Checks - Upsert - Valid - Combined\", function(test) {\n  //some in $set and some in $setOnInsert, make sure they're merged for validation purposes\n  ssrCon = validate(ssr, {\n    $set: {\n      requiredString: \"test\",\n      requiredBoolean: true,\n      requiredNumber: 1,\n      requiredDate: (new Date())\n    },\n    $setOnInsert: {\n      requiredEmail: \"test123@sub.example.edu\",\n      requiredUrl: \"http://google.com\",\n      requiredObject: {\n        requiredNumber: 1\n      },\n      'optionalObject.requiredString': \"test\"\n    }\n  }, true, true);\n  test.length(ssrCon.invalidKeys(), 0);\n\n  ssrCon = validate(ssr, {\n    $set: {\n      requiredString: \"test\",\n      requiredBoolean: true,\n      requiredNumber: 1,\n      requiredDate: (new Date())\n    },\n    $setOnInsert: {\n      requiredEmail: \"test123@sub.example.edu\",\n      requiredUrl: \"http://google.com\",\n      requiredObject: {\n        requiredNumber: 1\n      },\n      'optionalObject.requiredString': \"test\"\n    }\n  }, true, true);\n  test.length(ssrCon.invalidKeys(), 0);\n});\n\nTinytest.add(\"SimpleSchema - Required Checks - Upsert - Invalid - $set\", function(test) {\n  var sc = validate(ssr, {$set: {}}, true, true, true);\n  test.length(sc.invalidKeys(), 8);\n\n  sc = validate(ssr, {$set: {\n      requiredString: null,\n      requiredBoolean: null,\n      requiredNumber: null,\n      requiredDate: null,\n      requiredEmail: null,\n      requiredUrl: null,\n      requiredObject: null,\n      'optionalObject.requiredString': null\n    }}, true, true, true);\n  test.length(sc.invalidKeys(), 9);\n\n  sc = validate(ssr, {$set: {\n      requiredString: void 0,\n      requiredBoolean: void 0,\n      requiredNumber: void 0,\n      requiredDate: void 0,\n      requiredEmail: void 0,\n      requiredUrl: void 0,\n      requiredObject: void 0,\n      'optionalObject.requiredString': void 0\n    }}, true, true, true);\n  test.length(sc.invalidKeys(), 9);\n\n  sc = validate(ssr, {$set: {\n      requiredString: \"\",\n      requiredBoolean: null,\n      requiredNumber: null,\n      requiredDate: null,\n      requiredEmail: null,\n      requiredUrl: null,\n      requiredObject: null,\n      'optionalObject.requiredString': \"\"\n    }}, true, true, true);\n  test.length(sc.invalidKeys(), 9);\n\n  sc = validate(ssr, {$set: {\n      requiredString: \"   \",\n      requiredBoolean: null,\n      requiredNumber: null,\n      requiredDate: null,\n      requiredEmail: null,\n      requiredUrl: null,\n      requiredObject: null,\n      'optionalObject.requiredString': \"   \"\n    }}, true, true, true);\n  test.length(sc.invalidKeys(), 9);\n});\n\nTinytest.add(\"SimpleSchema - Required Checks - Upsert - Invalid - $setOnInsert\", function(test) {\n  var sc = validate(ssr, {$setOnInsert: {}}, true, true, true);\n  test.length(sc.invalidKeys(), 8);\n\n  sc = validate(ssr, {$setOnInsert: {\n      requiredString: null,\n      requiredBoolean: null,\n      requiredNumber: null,\n      requiredDate: null,\n      requiredEmail: null,\n      requiredUrl: null,\n      requiredObject: null,\n      'optionalObject.requiredString': null\n    }}, true, true, true);\n  test.length(sc.invalidKeys(), 9);\n\n  sc = validate(ssr, {$setOnInsert: {\n      requiredString: void 0,\n      requiredBoolean: void 0,\n      requiredNumber: void 0,\n      requiredDate: void 0,\n      requiredEmail: void 0,\n      requiredUrl: void 0,\n      requiredObject: void 0,\n      'optionalObject.requiredString': void 0\n    }}, true, true, true);\n  test.length(sc.invalidKeys(), 9);\n\n  sc = validate(ssr, {$setOnInsert: {\n      requiredString: \"\",\n      requiredBoolean: null,\n      requiredNumber: null,\n      requiredDate: null,\n      requiredEmail: null,\n      requiredUrl: null,\n      requiredObject: null,\n      'optionalObject.requiredString': \"\"\n    }}, true, true, true);\n  test.length(sc.invalidKeys(), 9);\n\n  sc = validate(ssr, {$setOnInsert: {\n      requiredString: \"   \",\n      requiredBoolean: null,\n      requiredNumber: null,\n      requiredDate: null,\n      requiredEmail: null,\n      requiredUrl: null,\n      requiredObject: null,\n      'optionalObject.requiredString': \"   \"\n    }}, true, true, true);\n  test.length(sc.invalidKeys(), 9);\n\n  //array of objects\n  sc = validate(friends, {$setOnInsert: {\n      friends: [{name: 'Bob'}],\n      enemies: []\n    }}, true, true, true);\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Required Checks - Upsert - Invalid - Combined\", function(test) {\n  //some in $set and some in $setOnInsert, make sure they're merged for validation purposes\n\n  var sc = validate(ssr, {$setOnInsert: {}, $set: {}}, true, true, true);\n  test.length(sc.invalidKeys(), 8);\n\n  sc = validate(ssr, {\n    $set: {\n      requiredString: null,\n      requiredBoolean: null,\n      requiredNumber: null,\n      requiredDate: null\n    },\n    $setOnInsert: {\n      requiredEmail: null,\n      requiredUrl: null,\n      requiredObject: null,\n      'optionalObject.requiredString': null\n    }\n  }, true, true, true);\n  test.length(sc.invalidKeys(), 9);\n\n  sc = validate(ssr, {\n    $set: {\n      requiredString: void 0,\n      requiredBoolean: void 0,\n      requiredNumber: void 0,\n      requiredDate: void 0\n    },\n    $setOnInsert: {\n      requiredEmail: void 0,\n      requiredUrl: void 0,\n      requiredObject: void 0,\n      'optionalObject.requiredString': void 0\n    }\n  }, true, true, true);\n  test.length(sc.invalidKeys(), 9);\n\n  sc = validate(ssr, {\n    $set: {\n      requiredString: \"\",\n      requiredBoolean: null,\n      requiredNumber: null,\n      requiredDate: null\n    },\n    $setOnInsert: {\n      requiredEmail: \"\",\n      requiredUrl: \"\",\n      requiredObject: null,\n      'optionalObject.requiredString': \"\"\n    }\n  }, true, true, true);\n  test.length(sc.invalidKeys(), 9);\n\n  sc = validate(ssr, {\n    $set: {\n      requiredString: \"   \",\n      requiredBoolean: null,\n      requiredNumber: null,\n      requiredDate: null\n    },\n    $setOnInsert: {\n      requiredEmail: \"   \",\n      requiredUrl: \"   \",\n      requiredObject: null,\n      'optionalObject.requiredString': \"   \"\n    }\n  }, true, true, true);\n  test.length(sc.invalidKeys(), 9);\n});\n\nTinytest.add(\"SimpleSchema - Required Checks - Update - Valid - $set\", function(test) {\n  var sc = validate(ssr, {$set: {}}, true);\n  test.equal(sc.invalidKeys(), []); //would not cause DB changes, so should not be an error\n\n  sc = validate(ssr, {$set: {\n      requiredString: void 0,\n      requiredBoolean: void 0,\n      requiredNumber: void 0,\n      requiredDate: void 0,\n      requiredEmail: void 0,\n      requiredUrl: void 0,\n      requiredObject: void 0,\n      'optionalObject.requiredString': void 0\n    }}, true);\n  test.equal(sc.invalidKeys(), []); //would not cause DB changes, so should not be an error\n\n  sc = validate(ssr, {$set: {\n      requiredString: \"test\",\n      requiredBoolean: true,\n      requiredNumber: 1,\n      requiredDate: (new Date()),\n      requiredEmail: \"test123@sub.example.edu\",\n      requiredUrl: \"http://google.com\",\n      requiredObject: {},\n      'optionalObject.requiredString': \"test\"\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  //array of objects\n  sc = validate(friends, {$set: {\n      'friends.1.name': \"Bob\"\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(friends, {$set: {\n      friends: [{name: 'Bob', type: 'good'}]\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n});\n\nTinytest.add(\"SimpleSchema - Required Checks - Update - Invalid - $set\", function(test) {\n  function t(s, obj, errors) {\n    var sc = validateNoClean(s, obj, true);\n    test.length(sc.invalidKeys(), errors);\n  }\n\n  t(ssr, {$set: {\n    requiredString: null,\n    requiredBoolean: null,\n    requiredNumber: null,\n    requiredDate: null,\n    requiredEmail: null,\n    requiredUrl: null,\n    requiredObject: null,\n    'optionalObject.requiredString': null\n  }}, 8);\n\n  t(ssr, {$set: {\n    requiredString: \"\",\n    requiredBoolean: null,\n    requiredNumber: null,\n    requiredDate: null,\n    requiredEmail: null,\n    requiredUrl: null,\n    requiredObject: null,\n    'optionalObject.requiredString': \"\"\n  }}, 8);\n\n  t(ssr, {$set: {\n    requiredString: \"   \",\n    requiredBoolean: null,\n    requiredNumber: null,\n    requiredDate: null,\n    requiredEmail: null,\n    requiredUrl: null,\n    requiredObject: null,\n    'optionalObject.requiredString': \"   \"\n  }}, 8);\n\n  //array of objects\n\n  //name is required\n  t(friends, {$set: {\n    'friends.1.name': null\n  }}, 1);\n\n  //type is required\n  t(friends, {$set: {\n    friends: [{name: 'Bob'}]\n  }}, 1);\n});\n\nTinytest.add(\"SimpleSchema - Required Checks - Update - Valid - $unset\", function(test) {\n  var sc = validate(ssr, {$unset: {}}, true);\n  test.equal(sc.invalidKeys(), []); //would not cause DB changes, so should not be an error\n\n  //make sure an optional can be unset when others are required\n  //retest with various values to be sure the value is ignored\n  sc = validate(ssr, {$unset: {\n      anOptionalOne: 1\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ssr, {$unset: {\n      anOptionalOne: null\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ssr, {$unset: {\n      anOptionalOne: \"\"\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  //array of objects\n  sc = validate(friends, {$unset: {\n      'friends.1.a.b': \"\"\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(friends, {$unset: {\n      'friends.1.a.b': 1,\n      'friends.2.a.b': 1,\n      'friends.3.a.b': 1\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n});\n\nTinytest.add(\"SimpleSchema - Required Checks - Update - Invalid - $unset\", function(test) {\n  var sc = validate(ssr, {$unset: {\n      requiredString: 1,\n      requiredBoolean: 1,\n      requiredNumber: 1,\n      requiredDate: 1,\n      requiredEmail: 1,\n      requiredUrl: 1\n    }}, true);\n  test.length(sc.invalidKeys(), 6);\n\n  //array of objects\n  sc = validate(friends, {$unset: {\n      'friends.1.name': 1\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(friends, {$unset: {\n      'friends.1.name': 1,\n      'friends.2.name': 1,\n      'friends.3.name': 1\n    }}, true);\n  test.length(sc.invalidKeys(), 3);\n});\n\nTinytest.add(\"SimpleSchema - Required Checks - Update - Valid - $rename\", function(test) {\n  //rename from optional key to another key in schema\n  var sc = ss.newContext();\n  sc.validate({$rename: {string: \"minMaxString\"}}, {modifier: true});\n  test.equal(sc.invalidKeys(), []);\n});\n\nTinytest.add(\"SimpleSchema - Required Checks - Update - Invalid - $rename\", function(test) {\n  //rename from optional key to a key not in schema\n  var sc = ss.newContext();\n  sc.validate({$rename: {string: \"newString\"}}, {modifier: true});\n  test.equal(sc.invalidKeys()[0][\"type\"], \"keyNotInSchema\");\n\n  //rename from required key\n  sc = ssr.newContext();\n  sc.validate({$rename: {requiredString: \"newRequiredString\"}}, {modifier: true});\n  test.equal(sc.invalidKeys()[0][\"type\"], \"required\");\n});\n\nTinytest.add(\"SimpleSchema - Type Checks - Insert\", function(test) {\n  var sc = validate(ss, {\n    string: \"test\",\n    boolean: true,\n    number: 1,\n    decimal: 1.1,\n    date: (new Date()),\n    url: \"http://google.com\",\n    email: \"test123@sub.example.edu\"\n  });\n  test.equal(sc.invalidKeys(), []);\n  /* STRING FAILURES */\n\n  //boolean string failure\n  var sc2 = ss.newContext();\n  sc2.validate({\n    string: true\n  });\n  test.length(sc2.invalidKeys(), 1); //without typeconvert\n\n  sc = validate(ss, {\n    string: true\n  });\n  test.equal(sc.invalidKeys(), []); //with typeconvert\n\n  //number string failure\n  sc2.validate({\n    string: 1\n  });\n  test.length(sc2.invalidKeys(), 1); //without typeconvert\n\n  sc = validate(ss, {\n    string: 1\n  });\n  test.equal(sc.invalidKeys(), []); //with typeconvert\n\n  //object string failure\n  sc2.validate({\n    string: {test: \"test\"}\n  });\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {\n    string: {test: \"test\"}\n  });\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //array string failure\n  sc2.validate({\n    string: [\"test\"]\n  });\n  test.length(sc2.invalidKeys(), 2); //without filter\n  \n  sc = validate(ss, {\n    string: [\"test\"]\n  });\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //instance string failure\n  sc2.validate({\n    string: (new Date())\n  });\n  test.length(sc2.invalidKeys(), 1); //without filter\n\n  sc = validate(ss, {\n    string: (new Date())\n  });\n  test.equal(sc.invalidKeys(), []); //with filter\n\n  /* BOOLEAN FAILURES */\n\n  //string bool failure\n  sc = validate(ss, {\n    boolean: \"test\"\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  //number bool failure\n  sc = validate(ss, {\n    boolean: 1\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  //object bool failure\n  sc2.validate({\n    boolean: {test: \"test\"}\n  });\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {\n    boolean: {test: \"test\"}\n  });\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //array bool failure\n  sc2.validate({\n    boolean: [\"test\"]\n  });\n  test.length(sc2.invalidKeys(), 2); //without filter\n  \n  sc = validate(ss, {\n    boolean: [\"test\"]\n  });\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //instance bool failure\n  sc = validate(ss, {\n    boolean: (new Date())\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  /* NUMBER FAILURES */\n\n  //string number failure\n  sc = validate(ss, {\n    number: \"test\"\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  //boolean number failure\n  sc = validate(ss, {\n    number: true\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  //object number failure\n  sc2.validate({\n    number: {test: \"test\"}\n  });\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {\n    number: {test: \"test\"}\n  });\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //array number failure\n  sc2.validate({\n    number: [\"test\"]\n  });\n  test.length(sc2.invalidKeys(), 2); //without filter\n  \n  sc = validate(ss, {\n    number: [\"test\"]\n  });\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //instance number failure\n  sc = validate(ss, {\n    number: (new Date())\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  //decimal number failure\n  sc = validate(ss, {\n    number: 1.1\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  //isNaN number failure\n  sc = validate(ss, {\n    number: NaN\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  /* INSTANCE FAILURES */\n\n  //string date failure\n  sc = validate(ss, {\n    date: \"test\"\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  //boolean date failure\n  sc = validate(ss, {\n    date: true\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  //object date failure\n  sc2.validate({\n    date: {test: \"test\"}\n  });\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {\n    date: {test: \"test\"}\n  });\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //array date failure\n  sc2.validate({\n    date: [\"test\"]\n  });\n  test.length(sc2.invalidKeys(), 2); //without filter\n  \n  sc = validate(ss, {\n    date: [\"test\"]\n  });\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //number date failure\n  sc = validate(ss, {\n    date: 1\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  /* REGEX FAILURES */\n\n  sc = validate(ss, {\n    url: \"blah\"\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {\n    email: \"blah\"\n  });\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Type Checks - Upsert\", function(test) {\n  //should validate the same as insert\n\n  var sc = validate(ss, {$setOnInsert: {\n      string: \"test\",\n      boolean: true,\n      number: 1,\n      decimal: 1.1,\n      date: (new Date()),\n      url: \"http://google.com\",\n      email: \"test123@sub.example.edu\"\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n  /* STRING FAILURES */\n\n  //boolean string failure\n  var sc2 = ss.newContext();\n  sc2.validate({$setOnInsert: {\n      string: true\n    }}, {modifier: true, upsert: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 1); //without typeconvert\n\n  sc = validate(ss, {$setOnInsert: {\n      string: true\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []); //with typeconvert\n\n  //number string failure\n  sc2.validate({$setOnInsert: {\n      string: 1\n    }}, {modifier: true, upsert: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 1); //without typeconvert\n\n  sc = validate(ss, {$setOnInsert: {\n      string: 1\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []); //with typeconvert\n\n  //object string failure\n  sc2.validate({$setOnInsert: {\n      string: {test: \"test\"}\n    }}, {modifier: true, upsert: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$setOnInsert: {\n      string: {test: \"test\"}\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //array string failure\n  sc2.validate({$setOnInsert: {\n      string: [\"test\"]\n    }}, {modifier: true, upsert: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$setOnInsert: {\n      string: [\"test\"]\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //instance string failure\n  sc2.validate({$setOnInsert: {\n      string: (new Date())\n    }}, {modifier: true, upsert: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 1); //without typeconvert\n\n  sc = validate(ss, {$setOnInsert: {\n      string: (new Date())\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []); //with typeconvert\n\n  /* BOOLEAN FAILURES */\n\n  //string bool failure\n  sc = validate(ss, {$setOnInsert: {\n      boolean: \"test\"\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //number bool failure\n  sc = validate(ss, {$setOnInsert: {\n      boolean: 1\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //object bool failure\n  sc2.validate({$setOnInsert: {\n      boolean: {test: \"test\"}\n    }}, {modifier: true, upsert: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$setOnInsert: {\n      boolean: {test: \"test\"}\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //array bool failure\n  sc2.validate({$setOnInsert: {\n      boolean: [\"test\"]\n    }}, {modifier: true, upsert: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$setOnInsert: {\n      boolean: [\"test\"]\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //instance bool failure\n  sc = validate(ss, {$setOnInsert: {\n      boolean: (new Date())\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  /* NUMBER FAILURES */\n\n  //string number failure\n  sc = validate(ss, {$setOnInsert: {\n      number: \"test\"\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //boolean number failure\n  sc = validate(ss, {$setOnInsert: {\n      number: true\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //object number failure\n  sc2.validate({$setOnInsert: {\n      number: {test: \"test\"}\n    }}, {modifier: true, upsert: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$setOnInsert: {\n      number: {test: \"test\"}\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //array number failure\n  sc2.validate({$setOnInsert: {\n      number: [\"test\"]\n    }}, {modifier: true, upsert: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$setOnInsert: {\n      number: [\"test\"]\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //instance number failure\n  sc = validate(ss, {$setOnInsert: {\n      number: (new Date())\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //decimal number failure\n  sc = validate(ss, {$setOnInsert: {\n      number: 1.1\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  /* INSTANCE FAILURES */\n\n  //string date failure\n  sc = validate(ss, {$setOnInsert: {\n      date: \"test\"\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //boolean date failure\n  sc = validate(ss, {$setOnInsert: {\n      date: true\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //object date failure\n  sc2.validate({$setOnInsert: {\n      date: {test: \"test\"}\n    }}, {modifier: true, upsert: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$setOnInsert: {\n      date: {test: \"test\"}\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //array date failure\n  sc2.validate({$setOnInsert: {\n      date: [\"test\"]\n    }}, {modifier: true, upsert: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$setOnInsert: {\n      date: [\"test\"]\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //number date failure\n  sc = validate(ss, {$setOnInsert: {\n      date: 1\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  /* REGEX FAILURES */\n\n  sc = validate(ss, {$setOnInsert: {\n      url: \"blah\"\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {$setOnInsert: {\n      email: \"blah\"\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Type Checks - Update\", function(test) {\n  var sc = validate(ss, {$set: {\n      string: \"test\",\n      boolean: true,\n      number: 1,\n      date: (new Date()),\n      url: \"http://google.com\",\n      email: \"test123@sub.example.edu\"\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  /* STRING FAILURES */\n\n  //boolean string failure\n  var sc2 = ss.newContext();\n  sc2.validate({$set: {\n      string: true\n    }}, {modifier: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 1); //without typeconvert\n\n  sc = validate(ss, {$set: {\n      string: true\n    }}, true);\n  test.equal(sc.invalidKeys(), []); //with typeconvert\n\n  //number string failure\n  sc2.validate({$set: {\n      string: 1\n    }}, {modifier: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 1); //without typeconvert\n\n  sc = validate(ss, {$set: {\n      string: 1\n    }}, true);\n  test.equal(sc.invalidKeys(), []); //with typeconvert\n\n  //object string failure\n  sc2.validate({$set: {\n      string: {test: \"test\"}\n    }}, {modifier: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$set: {\n      string: {test: \"test\"}\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //array string failure\n  sc2.validate({$set: {\n      string: [\"test\"]\n    }}, {modifier: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$set: {\n      string: [\"test\"]\n    }}, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //instance string failure\n  sc2.validate({$set: {\n      string: (new Date())\n    }}, {modifier: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 1); //without typeconvert\n\n  sc = validate(ss, {$set: {\n      string: (new Date())\n    }}, true);\n  test.equal(sc.invalidKeys(), []); //with typeconvert\n\n  /* BOOLEAN FAILURES */\n\n  //string bool failure\n  sc = validate(ss, {$set: {\n      boolean: \"test\"\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //number bool failure\n  sc = validate(ss, {$set: {\n      boolean: 1\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //object bool failure\n  sc2.validate({$set: {\n      boolean: {test: \"test\"}\n    }}, {modifier: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$set: {\n      boolean: {test: \"test\"}\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //array bool failure\n  sc2.validate({$set: {\n      boolean: [\"test\"]\n    }}, {modifier: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$set: {\n      boolean: [\"test\"]\n    }}, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //instance bool failure\n  sc = validate(ss, {$set: {\n      boolean: (new Date())\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  /* NUMBER FAILURES */\n\n  //string number failure\n  sc = validate(ss, {$set: {\n      number: \"test\"\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //boolean number failure\n  sc = validate(ss, {$set: {\n      number: true\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //object number failure\n  sc2.validate({$set: {\n      number: {test: \"test\"}\n    }}, {modifier: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$set: {\n      number: {test: \"test\"}\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //array number failure\n  sc2.validate({$set: {\n      number: [\"test\"]\n    }}, {modifier: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$set: {\n      number: [\"test\"]\n    }}, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //instance number failure\n  sc = validate(ss, {$set: {\n      number: (new Date())\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //sub objects\n  sc = validate(ss, {$set: {\n      'sub.number': 29\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {$set: {\n      sub: {number: 29}\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {$set: {\n      sub: {number: true}\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc2.validate({$set: {\n      sub: {number: [29]}\n    }}, {modifier: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$set: {\n      sub: {number: [29]}\n    }}, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  /* INSTANCE FAILURES */\n\n  //string date failure\n  sc = validate(ss, {$set: {\n      date: \"test\"\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //boolean date failure\n  sc = validate(ss, {$set: {\n      date: true\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //object date failure\n  sc2.validate({$set: {\n      date: {test: \"test\"}\n    }}, {modifier: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$set: {\n      date: {test: \"test\"}\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //array date failure\n  sc2.validate({$set: {\n      date: [\"test\"]\n    }}, {modifier: true, filter: false, autoConvert: false});\n  test.length(sc2.invalidKeys(), 2); //without filter\n\n  sc = validate(ss, {$set: {\n      date: [\"test\"]\n    }}, true);\n  test.length(sc.invalidKeys(), 1); //with filter\n\n  //number date failure\n  sc = validate(ss, {$set: {\n      date: 1\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  /* REGEX FAILURES */\n\n  sc = validate(ss, {$set: {\n      url: \"blah\"\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {$set: {\n      email: \"blah\"\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  /* ARRAY FAILURES */\n\n  sc = validate(ss, {$set: {\n      booleanArray: true,\n      dateArray: new Date,\n      allowedStringsArray: \"tuna\",\n      allowedNumbersArray: 2\n    }}, true);\n  test.length(sc.invalidKeys(), 4);\n\n  sc = validate(ss, {$push: {\n      booleanArray: \"blah\",\n      dateArray: \"blah\",\n      allowedStringsArray: \"blah\",\n      allowedNumbersArray: 200\n    }}, true);\n  test.length(sc.invalidKeys(), 4);\n\n  sc = validate(ss, {$addToSet: {\n      booleanArray: \"blah\",\n      dateArray: \"blah\",\n      allowedStringsArray: \"blah\",\n      allowedNumbersArray: 200\n    }}, true);\n  test.length(sc.invalidKeys(), 4);\n\n  //these should work\n  sc = validate(ss, {$set: {\n      booleanArray: [true],\n      dateArray: [new Date],\n      allowedStringsArray: [\"tuna\"],\n      allowedNumbersArray: [2]\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {$push: {\n      booleanArray: true,\n      dateArray: new Date,\n      allowedStringsArray: \"tuna\",\n      allowedNumbersArray: 2\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {$addToSet: {\n      booleanArray: true,\n      dateArray: new Date,\n      allowedStringsArray: \"tuna\",\n      allowedNumbersArray: 2\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  //$each with both invalid\n  sc = validate(ss, {$push: {\n      booleanArray: {$each: [\"foo\", \"bar\"]},\n      dateArray: {$each: [\"foo\", \"bar\"]},\n      allowedStringsArray: {$each: [\"foo\", \"bar\"]},\n      allowedNumbersArray: {$each: [200, 500]}\n    }}, true);\n  test.length(sc.invalidKeys(), 8);\n\n  sc = validate(ss, {$addToSet: {\n      booleanArray: {$each: [\"foo\", \"bar\"]},\n      dateArray: {$each: [\"foo\", \"bar\"]},\n      allowedStringsArray: {$each: [\"foo\", \"bar\"]},\n      allowedNumbersArray: {$each: [200, 500]}\n    }}, true);\n  test.length(sc.invalidKeys(), 8);\n\n  //$each with one valid and one invalid\n  sc = validate(ss, {$push: {\n      booleanArray: {$each: [\"foo\", true]},\n      dateArray: {$each: [\"foo\", (new Date())]},\n      allowedStringsArray: {$each: [\"foo\", \"tuna\"]},\n      allowedNumbersArray: {$each: [200, 1]}\n    }}, true);\n  test.length(sc.invalidKeys(), 4);\n\n  sc = validate(ss, {$addToSet: {\n      booleanArray: {$each: [\"foo\", true]},\n      dateArray: {$each: [\"foo\", (new Date())]},\n      allowedStringsArray: {$each: [\"foo\", \"tuna\"]},\n      allowedNumbersArray: {$each: [200, 1]}\n    }}, true);\n  test.length(sc.invalidKeys(), 4);\n\n  //$each with both valid\n  sc = validate(ss, {$push: {\n      booleanArray: {$each: [false, true]},\n      dateArray: {$each: [(new Date()), (new Date())]},\n      allowedStringsArray: {$each: [\"tuna\", \"fish\"]},\n      allowedNumbersArray: {$each: [2, 1]}\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {$addToSet: {\n      booleanArray: {$each: [false, true]},\n      dateArray: {$each: [(new Date()), (new Date())]},\n      allowedStringsArray: {$each: [\"tuna\", \"fish\"]},\n      allowedNumbersArray: {$each: [2, 1]}\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  //make sure slice is ignored\n  sc = validate(ss, {$push: {\n      booleanArray: {$each: [false, true], $slice: -5},\n      dateArray: {$each: [(new Date()), (new Date())], $slice: -5},\n      allowedStringsArray: {$each: [\"tuna\", \"fish\"], $slice: -5},\n      allowedNumbersArray: {$each: [2, 1], $slice: -5}\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  //pull, pullAll, and pop should be ignored; no validation\n  sc = validate(ss, {$pull: {\n      booleanArray: \"foo\",\n      dateArray: \"foo\",\n      allowedStringsArray: \"foo\",\n      allowedNumbersArray: 200\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {$pull: {\n      booleanArray: {$each: [\"foo\", \"bar\"]},\n      dateArray: {$each: [\"foo\", \"bar\"]},\n      allowedStringsArray: {$each: [\"foo\", \"bar\"]},\n      allowedNumbersArray: {$each: [200, 500]}\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {$pullAll: {\n      booleanArray: [\"foo\", \"bar\"],\n      dateArray: [\"foo\", \"bar\"],\n      allowedStringsArray: [\"foo\", \"bar\"],\n      allowedNumbersArray: [200, 500]\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {$pop: {\n      booleanArray: 1,\n      dateArray: 1,\n      allowedStringsArray: 1,\n      allowedNumbersArray: 1\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {$pop: {\n      booleanArray: -1,\n      dateArray: -1,\n      allowedStringsArray: -1,\n      allowedNumbersArray: -1\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n});\n\nTinytest.add(\"SimpleSchema - Minimum Checks - Insert\", function(test) {\n  /* STRING LENGTH */\n  var sc = validate(ss, {\n    minMaxString: \"longenough\"\n  });\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {\n    minMaxString: \"short\"\n  });\n  test.length(sc.invalidKeys(), 1);\n  /* NUMBER */\n  sc = validate(ss, {\n    minMaxNumber: 10\n  });\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {\n    minMaxNumber: 9\n  });\n  test.length(sc.invalidKeys(), 1);\n  sc = validate(ss, {\n    minMaxNumberCalculated: 10\n  });\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {\n    minMaxNumberCalculated: 9\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {\n    minZero: -1\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  /* DATE */\n  sc = validate(ss, {\n    minMaxDate: (new Date(Date.UTC(2013, 0, 1)))\n  });\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {\n    minMaxDate: (new Date(Date.UTC(2012, 11, 31)))\n  });\n  test.length(sc.invalidKeys(), 1);\n  sc = validate(ss, {\n    minMaxDateCalculated: (new Date(Date.UTC(2013, 0, 1)))\n  });\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {\n    minMaxDateCalculated: (new Date(Date.UTC(2012, 11, 31)))\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  /* ARRAY COUNT PLUS STRING LENGTH */\n\n  sc = validate(ss, {\n    minMaxStringArray: [\"longenough\", \"longenough\"]\n  });\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {\n    minMaxStringArray: [\"short\", \"short\"]\n  });\n  test.length(sc.invalidKeys(), 2);\n\n  sc = validate(ss, {\n    minMaxStringArray: []\n  });\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Minimum Checks - Upsert\", function(test) {\n  /* STRING LENGTH */\n  var sc = validate(ss, {$setOnInsert: {\n      minMaxString: \"longenough\"\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxString: \"short\"\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n  /* NUMBER */\n  sc = validate(ss, {$setOnInsert: {\n      minMaxNumber: 10\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxNumber: 9\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxNumberCalculated: 10\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxNumberCalculated: 9\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {$setOnInsert: {\n      minZero: -1\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  /* DATE */\n  sc = validate(ss, {$setOnInsert: {\n      minMaxDate: (new Date(Date.UTC(2013, 0, 1)))\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxDate: (new Date(Date.UTC(2012, 11, 31)))\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxDateCalculated: (new Date(Date.UTC(2013, 0, 1)))\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxDateCalculated: (new Date(Date.UTC(2012, 11, 31)))\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n  /* ARRAY COUNT PLUS STRING LENGTH */\n  sc = validate(ss, {$setOnInsert: {\n      minMaxStringArray: [\"longenough\", \"longenough\"]\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxStringArray: [\"short\", \"short\"]\n    }}, true, true);\n  test.length(sc.invalidKeys(), 2);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxStringArray: []\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Minimum Checks - Update\", function(test) {\n  /* STRING LENGTH */\n  var sc = validate(ss, {$set: {\n      minMaxString: \"longenough\"\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$set: {\n      minMaxString: \"short\"\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n  /* NUMBER */\n  sc = validate(ss, {$set: {\n      minMaxNumber: 10\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$set: {\n      minMaxNumber: 9\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n  sc = validate(ss, {$set: {\n      minMaxNumberCalculated: 10\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$set: {\n      minMaxNumberCalculated: 9\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {$set: {\n      minZero: -1\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {$inc: {\n      minZero: -5\n    }}, true);\n  // Should not be invalid because we don't know what we're starting from\n  test.length(sc.invalidKeys(), 0);\n\n  /* DATE */\n  sc = validate(ss, {$set: {\n      minMaxDate: (new Date(Date.UTC(2013, 0, 1)))\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$set: {\n      minMaxDate: (new Date(Date.UTC(2012, 11, 31)))\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n  sc = validate(ss, {$set: {\n      minMaxDateCalculated: (new Date(Date.UTC(2013, 0, 1)))\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$set: {\n      minMaxDateCalculated: (new Date(Date.UTC(2012, 11, 31)))\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n  /* ARRAY COUNT PLUS STRING LENGTH */\n  sc = validate(ss, {$set: {\n      minMaxStringArray: [\"longenough\", \"longenough\"]\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$set: {\n      minMaxStringArray: [\"short\", \"short\"]\n    }}, true);\n  test.length(sc.invalidKeys(), 2);\n  sc = validate(ss, {$set: {\n      minMaxStringArray: []\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Maximum Checks - Insert\", function(test) {\n  /* STRING LENGTH */\n  var sc = validate(ss, {\n    minMaxString: \"nottoolongnottoolong\"\n  });\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {\n    minMaxString: \"toolongtoolongtoolong\"\n  });\n  test.length(sc.invalidKeys(), 1);\n  /* NUMBER */\n  sc = validate(ss, {\n    minMaxNumber: 20\n  });\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {\n    minMaxNumber: 21\n  });\n  test.length(sc.invalidKeys(), 1);\n  sc = validate(ss, {\n    minMaxNumberCalculated: 20\n  });\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {\n    minMaxNumberCalculated: 21\n  });\n  test.length(sc.invalidKeys(), 1);\n  /* DATE */\n  sc = validate(ss, {\n    minMaxDate: (new Date(Date.UTC(2013, 11, 31)))\n  });\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {\n    minMaxDate: (new Date(Date.UTC(2014, 0, 1)))\n  });\n  test.length(sc.invalidKeys(), 1);\n  sc = validate(ss, {\n    minMaxDateCalculated: (new Date(Date.UTC(2013, 11, 31)))\n  });\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {\n    minMaxDateCalculated: (new Date(Date.UTC(2014, 0, 1)))\n  });\n  test.length(sc.invalidKeys(), 1);\n  /* ARRAY COUNT PLUS STRING LENGTH */\n  sc = validate(ss, {\n    minMaxStringArray: [\"nottoolongnottoolong\", \"nottoolongnottoolong\"]\n  });\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {\n    minMaxStringArray: [\"toolongtoolongtoolong\", \"toolongtoolongtoolong\"]\n  });\n  test.length(sc.invalidKeys(), 2);\n  sc = validate(ss, {\n    minMaxStringArray: [\"nottoolongnottoolong\", \"nottoolongnottoolong\", \"nottoolongnottoolong\"]\n  });\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Maximum Checks - Upsert\", function(test) {\n  /* STRING LENGTH */\n  var sc = validate(ss, {$setOnInsert: {\n      minMaxString: \"nottoolongnottoolong\"\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxString: \"toolongtoolongtoolong\"\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n  /* NUMBER */\n  sc = validate(ss, {$setOnInsert: {\n      minMaxNumber: 20\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxNumber: 21\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxNumberCalculated: 20\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxNumberCalculated: 21\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n  /* DATE */\n  sc = validate(ss, {$setOnInsert: {\n      minMaxDate: (new Date(Date.UTC(2013, 11, 31)))\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxDate: (new Date(Date.UTC(2014, 0, 1)))\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxDateCalculated: (new Date(Date.UTC(2013, 11, 31)))\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxDateCalculated: (new Date(Date.UTC(2014, 0, 1)))\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n  /* ARRAY COUNT PLUS STRING LENGTH */\n  sc = validate(ss, {$setOnInsert: {\n      minMaxStringArray: [\"nottoolongnottoolong\", \"nottoolongnottoolong\"]\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxStringArray: [\"toolongtoolongtoolong\", \"toolongtoolongtoolong\"]\n    }}, true, true);\n  test.length(sc.invalidKeys(), 2);\n  sc = validate(ss, {$setOnInsert: {\n      minMaxStringArray: [\"nottoolongnottoolong\", \"nottoolongnottoolong\", \"nottoolongnottoolong\"]\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Maximum Checks - Update\", function(test) {\n  /* STRING LENGTH */\n  var sc = validate(ss, {$set: {\n      minMaxString: \"nottoolongnottoolong\"\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$set: {\n      minMaxString: \"toolongtoolongtoolong\"\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n  /* NUMBER */\n  sc = validate(ss, {$set: {\n      minMaxNumber: 20\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$set: {\n      minMaxNumber: 21\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n  sc = validate(ss, {$set: {\n      minMaxNumberCalculated: 20\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$set: {\n      minMaxNumberCalculated: 21\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {$set: {\n      maxZero: 1\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {$inc: {\n      maxZero: 5\n    }}, true);\n  // Should not be invalid because we don't know what we're starting from\n  test.length(sc.invalidKeys(), 0);\n\n  /* DATE */\n  sc = validate(ss, {$set: {\n      minMaxDate: (new Date(Date.UTC(2013, 11, 31)))\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$set: {\n      minMaxDate: (new Date(Date.UTC(2014, 0, 1)))\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n  sc = validate(ss, {$set: {\n      minMaxDateCalculated: (new Date(Date.UTC(2013, 11, 31)))\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$set: {\n      minMaxDateCalculated: (new Date(Date.UTC(2014, 0, 1)))\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n  /* ARRAY COUNT PLUS STRING LENGTH */\n  sc = validate(ss, {$set: {\n      minMaxStringArray: [\"nottoolongnottoolong\", \"nottoolongnottoolong\"]\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n  sc = validate(ss, {$set: {\n      minMaxStringArray: [\"toolongtoolongtoolong\", \"toolongtoolongtoolong\"]\n    }}, true);\n  test.length(sc.invalidKeys(), 2);\n  sc = validate(ss, {$set: {\n      minMaxStringArray: [\"nottoolongnottoolong\", \"nottoolongnottoolong\", \"nottoolongnottoolong\"]\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Minimum Array Count - Insert - Invalid\", function(test) {\n  var sc = validate(friends, {\n    friends: [],\n    enemies: []\n  });\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Minimum Array Count - Update - Invalid\", function(test) {\n  var sc = validate(friends, {$set: {\n      friends: []\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Minimum Array Count - Upsert - Invalid\", function(test) {\n  var sc = validate(friends, {$setOnInsert: {\n      friends: [],\n      enemies: []\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Allowed Values Checks - Insert - Valid\", function(test) {\n  /* STRING */\n  var sc = validate(ss, {\n    allowedStrings: \"tuna\"\n  });\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {\n    valueIsAllowedString: \"pumpkin\"\n  });\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {\n    allowedStringsArray: [\"tuna\", \"fish\", \"salad\"]\n  });\n  test.equal(sc.invalidKeys(), []);\n\n  //array of objects\n  sc = validate(friends, {\n    friends: [{name: 'Bob', type: 'best'}],\n    enemies: []\n  });\n  test.equal(sc.invalidKeys(), []);\n\n  /* NUMBER */\n  sc = validate(ss, {\n    allowedNumbers: 1\n  });\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {\n    valueIsAllowedNumber: 1\n  });\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {\n    allowedNumbersArray: [1, 2, 3]\n  });\n  test.equal(sc.invalidKeys(), []);\n\n  //array of objects\n  sc = validate(friends, {\n    friends: [{name: 'Bob', type: 'best', a: {b: 5000}}],\n    enemies: []\n  });\n  test.equal(sc.invalidKeys(), []);\n});\n\nTinytest.add(\"SimpleSchema - Allowed Values Checks - Insert - Invalid\", function(test) {\n  /* STRING */\n  var sc = validate(ss, {\n    allowedStrings: \"tunas\"\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {\n    valueIsAllowedString: \"pumpkins\"\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  //array\n  sc = validate(ss, {\n    allowedStringsArray: [\"tuna\", \"fish\", \"sandwich\"]\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  //array of objects\n  sc = validate(friends, {\n    friends: [{name: 'Bob', type: 'smelly'}],\n    enemies: []\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  /* NUMBER */\n  sc = validate(ss, {\n    allowedNumbers: 4\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {\n    valueIsAllowedNumber: 2\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  //array\n  sc = validate(ss, {\n    allowedNumbersArray: [1, 2, 3, 4]\n  });\n  test.length(sc.invalidKeys(), 1);\n\n  //array of objects\n  sc = validate(friends, {\n    friends: [{name: 'Bob', type: 'best', a: {b: \"wrong\"}}],\n    enemies: []\n  });\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Allowed Values Checks - Upsert - Valid - $setOnInsert\", function(test) {\n  /* STRING */\n  var sc = validate(ss, {$setOnInsert: {\n      allowedStrings: \"tuna\"\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {$setOnInsert: {\n      valueIsAllowedString: \"pumpkin\"\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n\n  //array\n  sc = validate(ss, {$setOnInsert: {\n      allowedStringsArray: [\"tuna\", \"fish\", \"salad\"]\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n\n  //array of objects\n  sc = validate(friends, {$setOnInsert: {\n      friends: [{name: 'Bob', type: 'best'}],\n      enemies: []\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n\n  /* NUMBER */\n  sc = validate(ss, {$setOnInsert: {\n      allowedNumbers: 1\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {$setOnInsert: {\n      valueIsAllowedNumber: 1\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n\n  //array\n  sc = validate(ss, {$setOnInsert: {\n      allowedNumbersArray: [1, 2, 3]\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n\n  //array of objects\n  sc = validate(friends, {$setOnInsert: {\n      friends: [{name: 'Bob', type: 'best', a: {b: 5000}}],\n      enemies: []\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n});\n\nTinytest.add(\"SimpleSchema - Allowed Values Checks - Upsert - Invalid - $setOnInsert\", function(test) {\n  /* STRING */\n  var sc = validate(ss, {$setOnInsert: {\n      allowedStrings: \"tunas\"\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {$setOnInsert: {\n      valueIsAllowedString: \"pumpkins\"\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //array\n  sc = validate(ss, {$setOnInsert: {\n      allowedStringsArray: [\"tuna\", \"fish\", \"sandwich\"]\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //array of objects\n  sc = validate(friends, {$setOnInsert: {\n      friends: [{name: 'Bob', type: 'smelly'}],\n      enemies: []\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  /* NUMBER */\n  sc = validate(ss, {$setOnInsert: {\n      allowedNumbers: 4\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {$setOnInsert: {\n      valueIsAllowedNumber: 2\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //array\n  sc = validate(ss, {$setOnInsert: {\n      allowedNumbersArray: [1, 2, 3, 4]\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //array of objects\n  sc = validate(friends, {$setOnInsert: {\n      friends: [{name: 'Bob', type: 'best', a: {b: \"wrong\"}}],\n      enemies: []\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Allowed Values Checks - Update - Valid - $set\", function(test) {\n  /* STRING */\n  var sc = validate(ss, {$set: {\n      allowedStrings: \"tuna\"\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {$set: {\n      valueIsAllowedString: \"pumpkin\"\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  //array\n  sc = validate(ss, {$set: {\n      allowedStringsArray: [\"tuna\", \"fish\", \"salad\"]\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  //array of objects\n  sc = validate(friends, {$set: {\n      'friends.$.name': 'Bob'\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(friends, {$set: {\n      'friends.1.name': 'Bob'\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  /* NUMBER */\n  sc = validate(ss, {$set: {\n      allowedNumbers: 1\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {$set: {\n      valueIsAllowedNumber: 1\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(ss, {$set: {\n      allowedNumbersArray: [1, 2, 3]\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n});\n\nTinytest.add(\"SimpleSchema - Allowed Values Checks - Update - Invalid - $set\", function(test) {\n  /* STRING */\n  var sc = validate(ss, {$set: {\n      allowedStrings: \"tunas\"\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {$set: {\n      valueIsAllowedString: \"pumpkins\"\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //array\n  sc = validate(ss, {$set: {\n      allowedStringsArray: [\"tuna\", \"fish\", \"sandwich\"]\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  //array of objects\n  sc = validate(friends, {$set: {\n      'friends.$.name': 'Bobby'\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(friends, {$set: {\n      'friends.1.name': 'Bobby'\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  /* NUMBER */\n  sc = validate(ss, {$set: {\n      allowedNumbers: 4\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {$set: {\n      valueIsAllowedNumber: 2\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(ss, {$set: {\n      allowedNumbersArray: [1, 2, 3, 4]\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Black Box Objects\", function(test) {\n  var sc = validate(ss, {\n    blackBoxObject: \"string\"\n  }, false, false, true);\n  test.length(sc.invalidKeys(), 1);\n\n  var sc = validate(ss, {\n    blackBoxObject: {}\n  }, false, false, true);\n  test.length(sc.invalidKeys(), 0);\n\n  var sc = validate(ss, {\n    blackBoxObject: {\n      foo: \"bar\"\n    }\n  }, false, false, true);\n  test.length(sc.invalidKeys(), 0);\n\n  var sc = validate(ss, {$set: {\n    blackBoxObject: {\n      foo: \"bar\"\n    }\n  }}, true, false, true);\n  test.length(sc.invalidKeys(), 0);\n\n  var sc = validate(ss, {$set: {\n    'blackBoxObject.foo': \"bar\"\n  }}, true, false, true);\n  test.length(sc.invalidKeys(), 0);\n\n  var sc = validate(ss, {$set: {\n    'blackBoxObject.1': \"bar\"\n  }}, true, false, true);\n  test.length(sc.invalidKeys(), 0);\n\n  var sc = validate(ss, {$push: {\n    'blackBoxObject.foo': \"bar\"\n  }}, true, false, true);\n  test.length(sc.invalidKeys(), 0);\n\n  var sc = validate(ss, {$set: {\n    'blackBoxObject': []\n  }}, true, false, true);\n  test.length(sc.invalidKeys(), 1);\n});\n\nTinytest.add(\"SimpleSchema - Validation Against Another Key - Insert - Valid\", function(test) {\n  var sc = validate(pss, {\n    password: \"password\",\n    confirmPassword: \"password\"\n  });\n  test.equal(sc.invalidKeys(), []);\n});\n\nTinytest.add(\"SimpleSchema - Validation Against Another Key - Upsert - Valid - $setOnInsert\", function(test) {\n  var sc = validate(pss, {$setOnInsert: {\n      password: \"password\",\n      confirmPassword: \"password\"\n    }}, true, true);\n  test.equal(sc.invalidKeys(), []);\n});\n\nTinytest.add(\"SimpleSchema - Validation Against Another Key - Update - Valid - $set\", function(test) {\n  var sc = validate(pss, {$set: {\n      password: \"password\",\n      confirmPassword: \"password\"\n    }}, true);\n\n  test.equal(sc.invalidKeys(), []);\n});\n\nTinytest.add(\"SimpleSchema - Validation Against Another Key - Insert - Invalid\", function(test) {\n  var sc = validate(pss, {\n    password: \"password\",\n    confirmPassword: \"password1\"\n  });\n  test.length(sc.invalidKeys(), 1);\n  test.equal(sc.invalidKeys()[0].type, \"passwordMismatch\");\n});\n\nTinytest.add(\"SimpleSchema - Validation Against Another Key - Upsert - Invalid - $setOnInsert\", function(test) {\n  var sc = validate(pss, {$setOnInsert: {\n      password: \"password\",\n      confirmPassword: \"password1\"\n    }}, true, true);\n  test.length(sc.invalidKeys(), 1);\n  test.equal(sc.invalidKeys()[0].type, \"passwordMismatch\");\n});\n\nTinytest.add(\"SimpleSchema - Validation Against Another Key - Update - Invalid - $set\", function(test) {\n  var sc = validate(pss, {$set: {\n      password: \"password\",\n      confirmPassword: \"password1\"\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n  test.equal(sc.invalidKeys()[0].type, \"passwordMismatch\");\n});\n\nTinytest.add(\"SimpleSchema - Validate with the Match API\", function(test) {\n  test.instanceOf(pss, SimpleSchema);\n  test.isFalse(Match.test({password: 'pass'}, pss));\n  test.isTrue(Match.test({password: 'pass', confirmPassword: 'pass'}, pss));\n  try {\n    check({password: 'pass'}, pss);\n    test.fail({type: 'exception', message: 'expect the check validation to throws an exception'});\n  } catch (exception) {\n    test.instanceOf(exception, Match.Error);\n  }\n});\n\nTinytest.add(\"SimpleSchema - Extend Schema Definition\", function(test) {\n  try {\n    var ssWithUnique = new SimpleSchema({\n      name: {\n        type: String,\n        unique: true\n      }\n    });\n  } catch (exception) {\n    test.instanceOf(exception, Error);\n  }\n\n  SimpleSchema.extendOptions({\n    unique: Match.Optional(Boolean)\n  });\n\n  try {\n    ssWithUnique = new SimpleSchema({\n      name: {\n        type: String,\n        unique: true\n      }\n    });\n  } catch (exception) {\n    test.fail({type: 'exception', message: 'define a schema with a unique option in field definition'});\n  }\n});\n\nTinytest.add(\"SimpleSchema - Array of Objects\", function(test) {\n\n  var sc = validate(friends, {$set: {\n      enemies: [{}]\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(friends, {$set: {\n      enemies: [{name: \"Zach\"}]\n    }}, true);\n  test.length(sc.invalidKeys(), 0);\n\n  sc = validate(friends, {$set: {\n      enemies: [{name: \"Zach\", traits: []}]\n    }}, true);\n  test.length(sc.invalidKeys(), 0);\n\n  sc = validate(friends, {$set: {\n      enemies: [{name: \"Zach\", traits: [{}]}]\n    }}, true);\n  test.length(sc.invalidKeys(), 2);\n\n  sc = validate(friends, {$set: {\n      enemies: [{name: \"Zach\", traits: [{}, {}]}]\n    }}, true);\n  test.length(sc.invalidKeys(), 4);\n\n  sc = validate(friends, {$set: {\n      enemies: [{name: \"Zach\", traits: [{name: \"evil\"}]}]\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(friends, {$set: {\n      enemies: [{name: \"Zach\", traits: [{name: \"evil\", weight: \"heavy\"}]}]\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(friends, {$set: {\n      enemies: [{name: \"Zach\", traits: [{name: \"evil\", weight: 9.5}]}]\n    }}, true);\n  test.length(sc.invalidKeys(), 0);\n\n  sc = validate(friends, {$push: {\n      friends: {name: \"Bob\"}\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(friends, {$push: {\n      friends: {name: \"Bob\", type: \"best\"}\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(friends, {$push: {\n      friends: {name: \"Bobby\", type: \"best\"}\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(friends, {$push: {\n      friends: {$each: [{name: \"Bob\", type: \"best\"}, {name: \"Bob\", type: \"best\"}]}\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(friends, {$push: {\n      friends: {$each: [{name: \"Bob\", type: \"best\"}, {name: \"Bobby\", type: \"best\"}]}\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(friends, {$push: {\n      friends: {$each: [{name: \"Bob\", type: 2}, {name: \"Bobby\", type: \"best\"}]}\n    }}, true);\n  test.length(sc.invalidKeys(), 2);\n\n  sc = validate(friends, {$addToSet: {\n      friends: {name: \"Bob\"}\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(friends, {$addToSet: {\n      friends: {name: \"Bob\", type: \"best\"}\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(friends, {$addToSet: {\n      friends: {name: \"Bobby\", type: \"best\"}\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(friends, {$addToSet: {\n      friends: {$each: [{name: \"Bob\", type: \"best\"}, {name: \"Bob\", type: \"best\"}]}\n    }}, true);\n  test.equal(sc.invalidKeys(), []);\n\n  sc = validate(friends, {$addToSet: {\n      friends: {$each: [{name: \"Bob\", type: \"best\"}, {name: \"Bobby\", type: \"best\"}]}\n    }}, true);\n  test.length(sc.invalidKeys(), 1);\n\n  sc = validate(friends, {$addToSet: {\n      friends: {$each: [{name: \"Bob\", type: 2}, {name: \"Bobby\", type: \"best\"}]}\n    }}, true);\n  test.length(sc.invalidKeys(), 2);\n});\n\nTinytest.add(\"SimpleSchema - Multiple Contexts\", function(test) {\n  var ssContext1 = ssr.newContext();\n  ssContext1.validate({});\n  test.length(ssContext1.invalidKeys(), 8);\n  var ssContext2 = ssr.newContext();\n  ssContext2.validate({\n    requiredString: \"test\",\n    requiredBoolean: true,\n    requiredNumber: 1,\n    requiredDate: (new Date()),\n    requiredEmail: \"test123@sub.example.edu\",\n    requiredUrl: \"http://google.com\",\n    requiredObject: {\n      requiredNumber: 1\n    },\n    optionalObject: {\n      requiredString: \"test\"\n    }\n  });\n  test.length(ssContext1.invalidKeys(), 8);\n  test.length(ssContext2.invalidKeys(), 0);\n});\n\nTinytest.add(\"SimpleSchema - Cleanup With Modifier Operators\", function(test) {\n\n  function doTest(given, expected) {\n    var cleanObj = ss.clean(given);\n    test.equal(cleanObj, expected);\n  }\n\n  //BASELINE\n\n  //when you clean a good object it's still good\n  doTest({string: \"This is a string\"}, {string: \"This is a string\"});\n  //when you clean a bad object it's now good\n  doTest({string: \"This is a string\", admin: true}, {string: \"This is a string\"});\n  //type conversion works\n  doTest({string: 1}, {string: \"1\"});\n  //remove empty strings\n  doTest({string: \"\"}, {});\n\n  //WITH CUSTOM OBJECT\n\n  //when you clean a good object it's still good\n  var myObj = new Address(\"New York\", \"NY\");\n  doTest({customObject: myObj}, {customObject: myObj});\n\n  //when you clean a good object it's still good\n  var myObj = {\n    foo: \"bar\",\n    \"foobar.foobar\": 10000\n  };\n  doTest({blackBoxObject: myObj}, {blackBoxObject: myObj});\n\n  //$SET\n\n  //when you clean a good object it's still good\n  doTest({$set: {string: \"This is a string\"}}, {$set: {string: \"This is a string\"}});\n  //when you clean a bad object it's now good\n  doTest({$set: {string: \"This is a string\", admin: true}}, {$set: {string: \"This is a string\"}});\n  //type conversion works\n  doTest({$set: {string: 1}}, {$set: {string: \"1\"}});\n  //remove empty strings\n  doTest({$set: {string: \"\"}}, {$set: {}});\n\n  //$UNSET\n\n  //when you clean a good object it's still good\n  doTest({$unset: {string: null}}, {$unset: {string: null}});\n  //when you clean a bad object it's now good\n  doTest({$unset: {string: null, admin: null}}, {$unset: {string: null}});\n\n  //$SETONINSERT\n\n  //when you clean a good object it's still good\n  doTest({$setOnInsert: {string: \"This is a string\"}}, {$setOnInsert: {string: \"This is a string\"}});\n  //when you clean a bad object it's now good\n  doTest({$setOnInsert: {string: \"This is a string\", admin: true}}, {$setOnInsert: {string: \"This is a string\"}});\n  //type conversion works\n  doTest({$setOnInsert: {string: 1}}, {$setOnInsert: {string: \"1\"}});\n\n  //$INC\n\n  //when you clean a good object it's still good\n  doTest({$inc: {number: 1}}, {$inc: {number: 1}});\n  //when you clean a bad object it's now good\n  doTest({$inc: {number: 1, admin: 1}}, {$inc: {number: 1}});\n  //type conversion works\n  doTest({$inc: {number: \"1\"}}, {$inc: {number: 1}});\n\n  //$ADDTOSET\n\n  //when you clean a good object it's still good\n  doTest({$addToSet: {allowedNumbersArray: 1}}, {$addToSet: {allowedNumbersArray: 1}});\n  //when you clean a bad object it's now good\n  doTest({$addToSet: {allowedNumbersArray: 1, admin: 1}}, {$addToSet: {allowedNumbersArray: 1}});\n  //type conversion works\n  doTest({$addToSet: {allowedNumbersArray: \"1\"}}, {$addToSet: {allowedNumbersArray: 1}});\n\n  //$ADDTOSET WITH EACH\n\n  //when you clean a good object it's still good\n  doTest({$addToSet: {allowedNumbersArray: {$each: [1, 2, 3]}}}, {$addToSet: {allowedNumbersArray: {$each: [1, 2, 3]}}});\n  //when you clean a bad object it's now good\n  doTest({$addToSet: {allowedNumbersArray: {$each: [1, 2, 3]}, admin: {$each: [1, 2, 3]}}}, {$addToSet: {allowedNumbersArray: {$each: [1, 2, 3]}}});\n  //type conversion works\n  doTest({$addToSet: {allowedNumbersArray: {$each: [\"1\", 2, 3]}}}, {$addToSet: {allowedNumbersArray: {$each: [1, 2, 3]}}});\n\n  //$PUSH\n\n  //when you clean a good object it's still good\n  doTest({$push: {allowedNumbersArray: 1}}, {$push: {allowedNumbersArray: 1}});\n  //when you clean a bad object it's now good\n  doTest({$push: {allowedNumbersArray: 1, admin: 1}}, {$push: {allowedNumbersArray: 1}});\n  //type conversion works\n  doTest({$push: {allowedNumbersArray: \"1\"}}, {$push: {allowedNumbersArray: 1}});\n\n  //$PUSH WITH EACH\n\n  //when you clean a good object it's still good\n  doTest({$push: {allowedNumbersArray: {$each: [1, 2, 3]}}}, {$push: {allowedNumbersArray: {$each: [1, 2, 3]}}});\n  //when you clean a bad object it's now good\n  doTest({$push: {allowedNumbersArray: {$each: [1, 2, 3]}, admin: {$each: [1, 2, 3]}}}, {$push: {allowedNumbersArray: {$each: [1, 2, 3]}}});\n  //type conversion works\n  doTest({$push: {allowedNumbersArray: {$each: [\"1\", 2, 3]}}}, {$push: {allowedNumbersArray: {$each: [1, 2, 3]}}});\n\n  //$PULL\n\n  //when you clean a good object it's still good\n  doTest({$pull: {allowedNumbersArray: 1}}, {$pull: {allowedNumbersArray: 1}});\n  //when you clean a bad object it's now good\n  doTest({$pull: {allowedNumbersArray: 1, admin: 1}}, {$pull: {allowedNumbersArray: 1}});\n  //type conversion works\n  doTest({$pull: {allowedNumbersArray: \"1\"}}, {$pull: {allowedNumbersArray: 1}});\n\n  //$POP\n\n  //when you clean a good object it's still good\n  doTest({$pop: {allowedNumbersArray: 1}}, {$pop: {allowedNumbersArray: 1}});\n  //when you clean a bad object it's now good\n  doTest({$pop: {allowedNumbersArray: 1, admin: 1}}, {$pop: {allowedNumbersArray: 1}});\n  //type conversion works\n  doTest({$pop: {allowedNumbersArray: \"1\"}}, {$pop: {allowedNumbersArray: 1}});\n\n  //$PULLALL\n\n  doTest({$pullAll: {allowedNumbersArray: [1, 2, 3]}}, {$pullAll: {allowedNumbersArray: [1, 2, 3]}});\n  doTest({$pullAll: {allowedNumbersArray: [\"1\", 2, 3]}}, {$pullAll: {allowedNumbersArray: [1, 2, 3]}});\n\n  //$PUSHALL (DEPRECATED - SHOULD BE TRANSLATED TO $PUSH+$EACH\n\n  doTest({$pushAll: {allowedNumbersArray: [1, 2, 3]}}, {$push: {allowedNumbersArray: {$each: [1, 2, 3]}}});\n  doTest({$pushAll: {allowedNumbersArray: [\"1\", 2, 3]}}, {$push: {allowedNumbersArray: {$each: [1, 2, 3]}}});\n  //if there's also $push for some reason, the two should be combined\n  doTest({\n    $push: {\n      allowedNumbersArray: {$each: [\"1\", 2, 3]},\n      allowedStringsArray: {$each: [\"tuna\", \"fish\"]}\n    },\n    $pushAll: {allowedNumbersArray: [\"4\", 5, 6]}\n  }, {\n    $push: {\n      allowedNumbersArray: {$each: [1, 2, 3, 4, 5, 6]},\n      allowedStringsArray: {$each: [\"tuna\", \"fish\"]}\n    }\n  });\n\n});\n\nTinytest.add(\"SimpleSchema - Custom Types\", function(test) {\n  var peopleSchema = new SimpleSchema({\n    name: {\n      type: String,\n      max: 200\n    },\n    address: {\n      type: Address\n    },\n    createdAt: {\n      type: Date\n    },\n    file: {\n      type: Uint8Array\n    }\n  });\n\n  var c1 = peopleSchema.newContext();\n  var person = {\n    name: \"Person One\",\n    createdAt: new Date(),\n    file: new Uint8Array([104, 101, 108, 108, 111]),\n    address: new Address(\"San Francisco\", \"CA\")\n  };\n\n  // without cleaning first\n  c1 = validate(peopleSchema, person, false, false, true);\n  test.length(c1.invalidKeys(), 0);\n\n  // with cleaning first\n  c1 = validate(peopleSchema, person);\n  test.length(c1.invalidKeys(), 0);\n\n  var person2 = {\n    name: \"Person Two\",\n    createdAt: {},\n    file: {},\n    address: {}\n  };\n\n  // without cleaning first\n  c1 = validate(peopleSchema, person2, false, false, true);\n  test.length(c1.invalidKeys(), 3);\n\n  // with cleaning first\n  c1 = validate(peopleSchema, person2);\n  test.length(c1.invalidKeys(), 3);\n\n  peopleSchema = new SimpleSchema({\n    name: {\n      type: Object\n    },\n    address: {\n      type: Object\n    },\n    createdAt: {\n      type: Object\n    },\n    file: {\n      type: Object\n    }\n  });\n\n  // without cleaning first\n  c1 = validate(peopleSchema, person, false, false, true);\n  test.length(c1.invalidKeys(), 4);\n\n  // with cleaning first\n  c1 = validate(peopleSchema, person);\n  test.length(c1.invalidKeys(), 4);\n});\n\nTinytest.add(\"SimpleSchema - Nested Schemas\", function(test) {\n  var childDef = {type: String, min: 10};\n  var parentDef = {type: Number, min: 10};\n\n  var child = new SimpleSchema({\n    copied: childDef,\n    overridden: childDef\n  });\n\n  var parent = new SimpleSchema({\n    value: {\n      type: child\n    },\n    array: {\n      type: [child]\n    },\n    'value.overridden': parentDef,\n    'array.$.overridden': parentDef\n  });\n\n  var defs = parent._schema;\n\n  test.equal(defs['value'].type, Object, \"should change parent definition types to Object\");\n  test.equal(defs['value.copied'], childDef, \"should add child definitions to parent schema\");\n  test.equal(defs['value.overridden'], parentDef, \"parent definitions should override child definitions\");\n  test.equal(defs['array'].type, Array, \"should change array parent definition types to Array\");\n  test.equal(defs['array.$'].type, Object, \"should add array child definitions to parent schema\");\n  test.equal(defs['array.$.copied'], childDef, \"should add array child definitions to parent schema\");\n  test.equal(defs['array.$.overridden'], parentDef, \"parent definitions should override array child definitions\");\n});\n\nTinytest.add(\"SimpleSchema - Labels\", function(test) {\n  //inflection\n  test.equal(ss.label(\"minMaxNumber\"), \"Min max number\", '\"minMaxNumber\" should have inflected to \"Min max number\" label');\n  test.equal(ssr.label(\"optionalObject.requiredString\"), \"Required string\", '\"optionalObject.requiredString\" should have inflected to \"Required string\" label');\n\n  //dynamic\n  ss.labels({\"sub.number\": \"A different label\"});\n  test.equal(ss.label(\"sub.number\"), \"A different label\", '\"sub.number\" label should have been changed to \"A different label\"');\n\n  //callback\n  ss.labels({\"sub.number\": function() {\n      return \"A callback label\";\n    }});\n  test.equal(ss.label(\"sub.number\"), \"A callback label\", '\"sub.number\" label should be \"A callback label\" through the callback function');\n});\n\nTinytest.add(\"SimpleSchema - RegEx and Messages\", function(test) {\n\n  // global\n  SimpleSchema.messages({\n    'regEx': 'Global Message One',\n    'regEx one': 'Global Message Two',\n    'regEx.0 one': 'Global Message Three',\n    'regEx.1 one': 'Global Message Four'\n  });\n\n  var testSchema = new SimpleSchema({\n    one: {\n      type: String,\n      regEx: [\n        /^A/,\n        /B$/\n      ]\n    }\n  });\n\n  var c1 = testSchema.newContext();\n  c1.validate({one: \"BBB\"});\n  test.length(c1.invalidKeys(), 1);\n\n  var err = c1.invalidKeys()[0] || {};\n  test.equal(err.message, 'Global Message Three');\n\n  c1.validate({one: \"AAA\"});\n  test.length(c1.invalidKeys(), 1);\n\n  err = c1.invalidKeys()[0] || {};\n  test.equal(err.message, 'Global Message Four');\n\n  c1.validate({one: \"CCC\"});\n  test.length(c1.invalidKeys(), 1);\n\n  err = c1.invalidKeys()[0] || {};\n  test.equal(err.message, 'Global Message Three');\n\n  c1.validate({one: \"ACB\"});\n  test.length(c1.invalidKeys(), 0);\n\n  // schema-specific messages\n  testSchema.messages({\n    'regEx': 'Message One',\n    'regEx one': 'Message Two',\n    'regEx.0 one': 'Message Three',\n    'regEx.1 one': 'Message Four'\n  });\n\n  c1 = testSchema.newContext();\n  c1.validate({one: \"BBB\"});\n  test.length(c1.invalidKeys(), 1);\n\n  err = c1.invalidKeys()[0] || {};\n  test.equal(err.message, 'Message Three');\n\n  c1.validate({one: \"AAA\"});\n  test.length(c1.invalidKeys(), 1);\n\n  err = c1.invalidKeys()[0] || {};\n  test.equal(err.message, 'Message Four');\n\n  c1.validate({one: \"CCC\"});\n  test.length(c1.invalidKeys(), 1);\n\n  err = c1.invalidKeys()[0] || {};\n  test.equal(err.message, 'Message Three');\n\n  c1.validate({one: \"ACB\"});\n  test.length(c1.invalidKeys(), 0);\n});\n\nTinytest.add(\"SimpleSchema - Issue 28\", function(test) {\n  var is28ss = new SimpleSchema({\n    \"name\": {\n      type: String\n    },\n    \"embed\": {\n      type: Object\n    },\n    \"embed._id\": {\n      type: String\n    }\n  });\n\n  var is28sc = validate(is28ss, {$set: {\n      name: \"name\"\n    }}, true);\n  test.length(is28sc.invalidKeys(), 0);\n\n});\n\nTinytest.add(\"SimpleSchema - Issue 30\", function(test) {\n  var is30ss = new SimpleSchema({\n    firstname: {\n      type: String,\n      label: \"First name\",\n      optional: true\n    },\n    lastname: {\n      type: String,\n      label: \"Last name\",\n      optional: true,\n      valueIsAllowed: function(val, doc, op) {\n        if (!op) { //insert\n          if ((doc.firstname && doc.firstname.length) && (!val || !val.length)) {\n            return false;\n          } else {\n            return true;\n          }\n        }\n        if (op === \"$set\") { //update\n          if ((doc.$set.firstname && doc.$set.firstname.length)\n                  && (!val || !val.length)) {\n            return false;\n          } else {\n            return true;\n          }\n        }\n        return false; //allow only inserts and $set\n      }\n    }\n  });\n\n  var is30sc = validate(is30ss, {\n    firstname: \"name\"\n  });\n  test.equal(is30sc.invalidKeys()[0][\"type\"], \"notAllowed\");\n\n  is30sc = validate(is30ss, {\n    firstname: \"name\",\n    lastname: \"\"\n  });\n  test.equal(is30sc.invalidKeys()[0][\"type\"], \"notAllowed\");\n\n  is30sc = validate(is30ss, {\n    firstname: \"name\",\n    lastname: \"name\"\n  });\n  test.equal(is30sc.invalidKeys(), []);\n\n  is30sc = validate(is30ss, {$set: {\n      firstname: \"name\"\n    }}, true);\n  test.equal(is30sc.invalidKeys()[0][\"type\"], \"notAllowed\");\n\n  is30sc = validate(is30ss, {$set: {\n      firstname: \"name\",\n      lastname: \"\"\n    }}, true);\n  test.equal(is30sc.invalidKeys()[0][\"type\"], \"notAllowed\");\n\n  is30sc = validate(is30ss, {$set: {\n      firstname: \"name\",\n      lastname: \"name\"\n    }}, true);\n  test.equal(is30sc.invalidKeys(), []);\n\n});\n\nTinytest.add(\"SimpleSchema - Basic Schema Merge\", function(test) {\n\n  var s1 = new SimpleSchema([\n    {\n      a: {\n        type: Boolean\n      },\n      b: {\n        type: String\n      }\n    },\n    {\n      c: {\n        type: String\n      },\n      d: {\n        type: String\n      }\n    }\n  ]);\n\n  test.equal(s1._schema, {\n    a: {\n      type: Boolean\n    },\n    b: {\n      type: String\n    },\n    c: {\n      type: String\n    },\n    d: {\n      type: String\n    }\n  }, \"schema was not merged correctly\");\n\n  // test validation\n  var ctx = s1.namedContext();\n  var isValid = ctx.validate({a: \"Wrong\"});\n  test.length(ctx.invalidKeys(), 4);\n\n});\n\nTinytest.add(\"SimpleSchema - Mixed Schema Merge\", function(test) {\n\n  var s1 = new SimpleSchema({\n    a: {\n      type: Boolean\n    },\n    b: {\n      type: [String]\n    }\n  });\n\n  var s2 = new SimpleSchema([s1, {\n      c: {\n        type: String\n      },\n      d: {\n        type: String\n      }\n    }]);\n\n  test.equal(s2._schema, {\n    a: {\n      type: Boolean\n    },\n    b: {\n      type: Array\n    },\n    'b.$': {\n      type: String,\n      optional: true\n    },\n    c: {\n      type: String\n    },\n    d: {\n      type: String\n    }\n  }, \"schema was not merged correctly\");\n\n  // test validation\n  var ctx = s2.namedContext();\n  var isValid = ctx.validate({a: \"Wrong\"});\n  test.length(ctx.invalidKeys(), 4);\n\n});\n\nTinytest.add(\"SimpleSchema - Mixed Schema Merge With Base Extend and Override\", function(test) {\n\n  var s1 = new SimpleSchema({\n    a: {\n      type: Boolean\n    },\n    b: {\n      type: [String]\n    }\n  });\n\n  var s2 = new SimpleSchema([s1, {\n      a: {\n        type: Number\n      },\n      b: {\n        label: \"Bacon\"\n      },\n      c: {\n        type: String\n      },\n      d: {\n        type: String\n      }\n    }]);\n\n  test.equal(s2._schema, {\n    a: {\n      type: Number\n    },\n    b: {\n      type: Array,\n      label: \"Bacon\"\n    },\n    'b.$': {\n      type: String,\n      optional: true,\n      label: \"Bacon\"\n    },\n    c: {\n      type: String\n    },\n    d: {\n      type: String\n    }\n  }, \"schema was not merged correctly\");\n\n  // test validation\n  var ctx = s2.namedContext();\n  var isValid = ctx.validate({a: \"Wrong\"});\n  test.length(ctx.invalidKeys(), 4);\n\n});\n\nTinytest.add(\"SimpleSchema - AutoValues\", function(test) {\n\n  function avClean(obj, exp, opts) {\n    autoValues.clean(obj, opts);\n    test.equal(obj, exp);\n  }\n\n  avClean(\n          {name: \"Test\", firstWord: \"Illegal to manually set value\"},\n  {name: \"Test\", someDefault: 5, updateCount: 0}\n  );\n\n  avClean(\n          {name: \"Test\", someDefault: 20},\n  {name: \"Test\", someDefault: 20, updateCount: 0}\n  );\n\n  var o = {name: \"Test\", content: 'Hello world!'};\n  autoValues.clean(o);\n  test.equal(o.firstWord, 'Hello', 'expected firstWord to be \"Hello\"');\n  test.length(o.updatesHistory, 1);\n  test.equal(o.updatesHistory[0].content, 'Hello world!', 'expected updatesHistory.content to be \"Hello world!\"');\n\n  // autoValues in object in array with modifier\n  o = {$push: {avArrayOfObjects: {a: \"b\"}}};\n  autoValues.clean(o, {isModifier: true});\n  test.equal(o, {$push: {avArrayOfObjects: {a: \"b\", foo: \"bar\"}}, $set: {someDefault: 5}, $inc:{updateCount:1}}, 'autoValue in object in array not set correctly');\n\n  o = {$set: {avArrayOfObjects: [{a: \"b\"}]}};\n  autoValues.clean(o, {isModifier: true});\n  test.equal(o, {$set: {avArrayOfObjects: [{a: \"b\", foo: \"bar\"}], someDefault: 5}, $inc:{updateCount:1}}, 'autoValue in object in array not set correctly');\n\n  var av = new SimpleSchema({\n    foo: {\n      type: String,\n      optional: true\n    },\n    bar: {\n      type: Boolean,\n      optional: true,\n      autoValue: function() {\n        test.equal(this.isSet, false);\n        test.isUndefined(this.value);\n        test.equal(this.operator, null);\n        var foo = this.field('foo');\n        test.equal(foo.isSet, false);\n        test.isUndefined(foo.value);\n        test.equal(foo.operator, null);\n        foo = this.siblingField('foo');\n        test.equal(foo.isSet, false);\n        test.isUndefined(foo.value);\n        test.equal(foo.operator, null);\n      }\n    }\n  });\n  av.clean({});\n\n  var av2 = new SimpleSchema({\n    foo: {\n      type: String,\n      optional: true\n    },\n    bar: {\n      type: Boolean,\n      optional: true,\n      autoValue: function() {\n        test.equal(this.isSet, false);\n        test.isUndefined(this.value);\n        test.equal(this.operator, null);\n        var foo = this.field('foo');\n        test.equal(foo.isSet, true);\n        test.equal(foo.value, \"clown\");\n        test.equal(foo.operator, null);\n        foo = this.siblingField('foo');\n        test.equal(foo.isSet, true);\n        test.equal(foo.value, \"clown\");\n        test.equal(foo.operator, null);\n      }\n    }\n  });\n  av2.clean({foo: \"clown\"});\n  \n  var av3 = new SimpleSchema({\n    foo: {\n      type: String,\n      optional: true\n    },\n    bar: {\n      type: Boolean,\n      optional: true,\n      autoValue: function() {\n        test.equal(this.isSet, true);\n        test.equal(this.value, true);\n        test.equal(this.operator, null);\n        var foo = this.field('foo');\n        test.equal(foo.isSet, true);\n        test.equal(foo.value, \"clown\");\n        test.equal(foo.operator, null);\n        foo = this.siblingField('foo');\n        test.equal(foo.isSet, true);\n        test.equal(foo.value, \"clown\");\n        test.equal(foo.operator, null);\n      }\n    }\n  });\n  av3.clean({foo: \"clown\", bar: true});\n  \n  var av4 = new SimpleSchema({\n    foo: {\n      type: String,\n      optional: true\n    },\n    bar: {\n      type: Boolean,\n      optional: true,\n      autoValue: function() {\n        test.equal(this.isSet, true);\n        test.equal(this.value, false);\n        test.equal(this.operator, null);\n        var foo = this.field('foo');\n        test.equal(foo.isSet, false);\n        test.isUndefined(foo.value);\n        test.equal(foo.operator, null);\n        foo = this.siblingField('foo');\n        test.equal(foo.isSet, false);\n        test.isUndefined(foo.value);\n        test.equal(foo.operator, null);\n        this.unset();\n      }\n    }\n  });\n  var doc = {bar: false};\n  av4.clean(doc);\n  test.equal(doc, {});\n  \n  var av5 = new SimpleSchema({\n    foo: {\n      type: String,\n      optional: true\n    },\n    bar: {\n      type: Boolean,\n      optional: true,\n      autoValue: function() {\n        test.equal(this.isSet, true);\n        test.equal(this.value, false);\n        test.equal(this.operator, \"$set\");\n        var foo = this.field('foo');\n        test.equal(foo.isSet, false);\n        test.isUndefined(foo.value);\n        test.equal(foo.operator, null);\n        foo = this.siblingField('foo');\n        test.equal(foo.isSet, false);\n        test.isUndefined(foo.value);\n        test.equal(foo.operator, null);\n      }\n    }\n  });\n  var doc = {$set: {bar: false}};\n  av5.clean(doc);\n  test.equal(doc, {$set: {bar: false}});\n  \n  var av6 = new SimpleSchema({\n    foo: {\n      type: String,\n      optional: true\n    },\n    bar: {\n      type: Boolean,\n      optional: true,\n      autoValue: function() {\n        test.equal(this.isSet, true);\n        test.equal(this.value, false);\n        test.equal(this.operator, \"$set\");\n        var foo = this.field('foo');\n        test.equal(foo.isSet, true);\n        test.equal(foo.value, \"clown\");\n        test.equal(foo.operator, \"$set\");\n        foo = this.siblingField('foo');\n        test.equal(foo.isSet, true);\n        test.equal(foo.value, \"clown\");\n        test.equal(foo.operator, \"$set\");\n        return true;\n      }\n    }\n  });\n  doc = {$set: {foo: \"clown\", bar: false}};\n  av6.clean(doc);\n  test.equal(doc, {$set: {foo: \"clown\", bar: true}});\n  \n  var av7 = new SimpleSchema({\n    foo: {\n      type: String,\n      optional: true\n    },\n    bar: {\n      type: Boolean,\n      optional: true,\n      autoValue: function() {\n        test.equal(this.isSet, false);\n        test.isUndefined(this.value);\n        test.equal(this.operator, null);\n        var foo = this.field('foo');\n        test.equal(foo.isSet, false);\n        test.isUndefined(foo.value);\n        test.equal(foo.operator, null);\n        foo = this.siblingField('foo');\n        test.equal(foo.isSet, false);\n        test.isUndefined(foo.value);\n        test.equal(foo.operator, null);\n        return {$set: true};\n      }\n    }\n  });\n  doc = {};\n  av7.clean(doc);\n  test.equal(doc, {$set: {bar: true}});\n\n});\n\nTinytest.add(\"SimpleSchema - DefaultValues\", function(test) {\n\n  function avClean(obj, exp, opts) {\n    defaultValues.clean(obj, opts);\n    test.equal(obj, exp);\n  }\n\n  avClean(\n          {},\n          {name: \"Test\", a: {b: \"Test\"}, strVals: []}\n  );\n\n  avClean(\n          {strVals: [\"foo\", \"bar\"]},\n          {name: \"Test\", a: {b: \"Test\"}, strVals: [\"foo\", \"bar\"]}\n  );\n\n  avClean(\n          {name: \"Test1\", a: {b: \"Test1\"}},\n  {name: \"Test1\", a: {b: \"Test1\"}, strVals: []}\n  );\n\n  avClean(\n          {name: \"Test1\", a: {b: \"Test1\"}, b: []},\n  {name: \"Test1\", a: {b: \"Test1\"}, b: [], strVals: []}\n  );\n\n  avClean(\n          {name: \"Test1\", a: {b: \"Test1\"}, b: [{}]},\n  {name: \"Test1\", a: {b: \"Test1\"}, b: [{a: \"Test\"}], strVals: []}\n  );\n\n  avClean(\n          {name: \"Test1\", a: {b: \"Test1\"}, b: [{a: \"Test1\"}, {}]},\n  {name: \"Test1\", a: {b: \"Test1\"}, b: [{a: \"Test1\"}, {a: \"Test\"}], strVals: []}\n  );\n\n  // Updates should not be affected\n  avClean(\n          {$addToSet: {strVals: 'new value'}},\n          {$addToSet: {strVals: 'new value'}},\n          {isModifier: true}\n  );\n\n});\n\nTinytest.add(\"SimpleSchema - Optional Custom\", function(test) {\n  var ctx = optCust.namedContext();\n  // Ensure that custom validation runs even when the optional\n  // field is undefined.\n  ctx.validate({});\n  test.equal(ctx.invalidKeys().length, 1, 'expected 1 invalid key');\n  test.equal(ctx.invalidKeys()[0].type, 'custom', 'expected custom error');\n});\n\nTinytest.add(\"SimpleSchema - Required Custom\", function (test) {\n  var ctx = reqCust.namedContext();\n  // Ensure that we don't get required errors for a required field that\n  // has a `custom` function when we're doing an UPDATE\n  ctx.validate({$set: {a: [{}]}}, {modifier: true});\n  test.equal(ctx.invalidKeys().length, 0, 'expected no validation errors');\n\n  ctx.validate({$set: {'a.0': {}}}, {modifier: true});\n  test.equal(ctx.invalidKeys().length, 0, 'expected no validation errors');\n\n  ctx.validate({$push: {'a': {}}}, {modifier: true});\n  test.equal(ctx.invalidKeys().length, 0, 'expected no validation errors');\n});\n\nTinytest.add(\"SimpleSchema - AllowsKey\", function(test) {\n  function run(key, allowed) {\n    test.equal(ss.allowsKey(key), allowed, 'Incorrect allowsKey result for ' + key);\n  }\n\n  run('minMaxString', true);\n  run('minMaxString.$', false);\n  run('minMaxString.$.foo', false);\n  run('minMaxString.$foo', false);\n  run('minMaxString.foo', false);\n  run('sub', true);\n  run('sub.number', true);\n  run('sub.number.$', false);\n  run('sub.number.$.foo', false);\n  run('sub.number.$foo', false);\n  run('sub.number.foo', false);\n  run('minMaxStringArray', true);\n  run('minMaxStringArray.$', true);\n  run('minMaxStringArray.$.foo', false);\n  run('minMaxStringArray.foo', false);\n  run('customObject', true);\n  run('customObject.$', false);\n  run('customObject.foo', true);\n  run('customObject.foo.$', true);\n  run('customObject.foo.$foo', true);\n  run('customObject.foo.$.$foo', true);\n  run('blackBoxObject', true);\n  run('blackBoxObject.$', false);\n  run('blackBoxObject.foo', true);\n  run('blackBoxObject.foo.$', true);\n  run('blackBoxObject.foo.$foo', true);\n  run('blackBoxObject.foo.$.$foo', true);\n});\n\nTinytest.add(\"SimpleSchema - RegEx - Email\", function (test) {\n  var expr = SimpleSchema.RegEx.Email;\n  var isTrue = function (s) { test.isTrue(expr.test(s), s) };\n  var isFalse = function (s) { test.isFalse(expr.test(s), s) };\n  isTrue(\"name@web.de\");\n  isTrue(\"name+addition@web.de\");\n  isTrue(\"st#r~ange.e+mail@web.de\");\n  isFalse(\"name@localhost\");\n  isFalse(\"name@192.168.200.5\");\n  isFalse(\"name@BCDF:45AB:1245:75B9:0987:1562:4567:1234\");\n  isFalse(\"name@BCDF:45AB:1245:75B9::0987:1234:1324\");\n  isFalse(\"name@BCDF:45AB:1245:75B9:0987:1234:1324\");\n  isFalse(\"name@::1\");\n});\n\nTinytest.add(\"SimpleSchema - RegEx - WeakEmail\", function (test) {\n  var expr = SimpleSchema.RegEx.WeakEmail;\n  var isTrue = function (s) { test.isTrue(expr.test(s), s) };\n  var isFalse = function (s) { test.isFalse(expr.test(s), s) };\n  isTrue(\"name@web.de\");\n  isTrue(\"name+addition@web.de\");\n  isTrue(\"st#r~ange.e+mail@web.de\");\n  isTrue(\"name@localhost\");\n  isTrue(\"name@192.168.200.5\");\n  isTrue(\"name@BCDF:45AB:1245:75B9:0987:1562:4567:1234\");\n  isTrue(\"name@BCDF:45AB:1245:75B9::0987:1234:1324\");\n  isFalse(\"name@BCDF:45AB:1245:75B9:0987:1234:1324\");\n  isTrue(\"name@::1\");\n});\n\nTinytest.add(\"SimpleSchema - RegEx - Domain\", function (test) {\n  var expr = SimpleSchema.RegEx.Domain;\n  var isTrue = function (s) { test.isTrue(expr.test(s), s) };\n  var isFalse = function (s) { test.isFalse(expr.test(s), s) };\n  isTrue(\"domain.com\");\n  isFalse(\"localhost\");\n  isFalse(\"192.168.200.5\");\n  isFalse(\"BCDF:45AB:1245:75B9:0987:1562:4567:1234:AB36\");\n});\n\nTinytest.add(\"SimpleSchema - RegEx - WeakDomain\", function (test) {\n  var expr = SimpleSchema.RegEx.WeakDomain;\n  var isTrue = function (s) { test.isTrue(expr.test(s), s) };\n  var isFalse = function (s) { test.isFalse(expr.test(s), s) };\n  isTrue(\"domain.com\");\n  isTrue(\"localhost\");\n  isTrue(\"192.168.200.5\");\n  isTrue(\"BCDF:45AB:1245:75B9:0987:1562:4567:1234\");\n});\n\nTinytest.add(\"SimpleSchema - RegEx - IP (4 and 6)\", function (test) {\n  var expr = SimpleSchema.RegEx.IP;\n  var isTrue = function (s) { test.isTrue(expr.test(s), s) };\n  var isFalse = function (s) { test.isFalse(expr.test(s), s) };\n  isFalse(\"localhost\");\n  isTrue(\"192.168.200.5\");\n  isFalse(\"320.168.200.5\");\n  isFalse(\"192.168.5\");\n  isTrue(\"BCDF:45AB:1245:75B9:0987:1562:4567:1234\");\n  isFalse(\"BCDF:45AB:1245:75B9:0987:1562:4567:1234:AB36\");\n  isTrue(\"BCDF:45AB:1245:75B9::0987:1234:1324\");\n  isFalse(\"BCDF:45AB:1245:75B9:0987:1234:1324\");\n  isTrue(\"::1\");\n});\n\nTinytest.add(\"SimpleSchema - RegEx - IPv4\", function (test) {\n  var expr = SimpleSchema.RegEx.IPv4;\n  var isTrue = function (s) { test.isTrue(expr.test(s), s) };\n  var isFalse = function (s) { test.isFalse(expr.test(s), s) };\n  isFalse(\"localhost\");\n  isTrue(\"192.168.200.5\");\n  isFalse(\"320.168.200.5\");\n  isFalse(\"192.168.5\");\n  isFalse(\"BCDF:45AB:1245:75B9:0987:1562:4567:1234\");\n  isFalse(\"BCDF:45AB:1245:75B9:0987:1562:4567:1234:AB36\");\n  isFalse(\"BCDF:45AB:1245:75B9::0987:1234:1324\");\n  isFalse(\"BCDF:45AB:1245:75B9:0987:1234:1324\");\n  isFalse(\"::1\");\n});\n\nTinytest.add(\"SimpleSchema - RegEx - IPv6\", function (test) {\n  var expr = SimpleSchema.RegEx.IPv6;\n  var isTrue = function (s) { test.isTrue(expr.test(s), s) };\n  var isFalse = function (s) { test.isFalse(expr.test(s), s) };\n  isFalse(\"localhost\");\n  isFalse(\"192.168.200.5\");\n  isFalse(\"320.168.200.5\");\n  isFalse(\"192.168.5\");\n  isTrue(\"BCDF:45AB:1245:75B9:0987:1562:4567:1234\");\n  isFalse(\"BCDF:45AB:1245:75B9:0987:1562:4567:1234:AB36\");\n  isTrue(\"BCDF:45AB:1245:75B9::0987:1234:1324\");\n  isFalse(\"BCDF:45AB:1245:75B9:0987:1234:1324\");\n  isTrue(\"::1\");\n});\n\n/*\n * END TESTS\n */\n","var flat = function(doc, opts) {\n  var mDoc = new MongoObject(doc);\n  return mDoc.getFlatObject(opts);\n};\n\nvar passthru = function(doc) {\n  var mDoc = new MongoObject(doc);\n  return mDoc.getObject();\n};\n\nTinytest.add(\"MongoObject - Round Trip\", function(test) {\n  // Helper Function\n  function rt(o) {\n    var po = passthru(o);\n    var jo = JSON.stringify(o);\n    var jpo = JSON.stringify(po);\n    test.equal(jpo, jo, \"After round trip, object was \" + jpo + \" but should have been \" + jo);\n  }\n\n  // Round Trip Tests\n  rt({});\n  rt({a: 1});\n  rt({a: \"Test\"});\n  rt({a: new Date});\n  rt({a: []});\n  rt({a: {}});\n  rt({a: [1, 2]});\n  rt({a: [\"Test1\", \"Test2\"]});\n  rt({a: [new Date, new Date]});\n  rt({a: {b: 1}});\n  rt({a: {b: \"Test\"}});\n  rt({a: {b: new Date}});\n  rt({a: {b: []}});\n  rt({a: {b: {}}});\n  rt({a: {b: [1, 2]}});\n  rt({a: {b: [\"Test1\", \"Test2\"]}});\n  rt({a: {b: [new Date, new Date]}});\n  rt({a: {b: [{c: 1}, {c: 2}]}});\n  rt({a: {b: [{c: \"Test1\"}, {c: \"Test2\"}]}});\n  rt({a: {b: [{c: new Date}, {c: new Date}]}});\n\n});\n\nTinytest.add(\"MongoObject - Flat\", function(test) {\n  // Helper Function\n  function testFlat(o, exp, opts) {\n    var fo = flat(o, opts);\n    var jo = JSON.stringify(o);\n    var jfo = JSON.stringify(fo);\n    var jexp = JSON.stringify(exp);\n    test.equal(jfo, jexp, \"Object \" + jo + \" was flattened to \" + jfo + \" but should have been \" + jexp);\n  }\n\n  // Round Trip Tests\n  var testDate = new Date;\n  testFlat({}, {});\n  testFlat({a: 1}, {a: 1});\n  testFlat({a: \"Test\"}, {a: \"Test\"});\n  testFlat({a: testDate}, {a: testDate});\n  testFlat({a: []}, {a: []});\n  testFlat({a: {}}, {a: {}});\n  testFlat({a: [1, 2]}, {\"a.0\": 1, \"a.1\": 2});\n  testFlat({a: [1, 2]}, {a: [1, 2]}, {keepArrays: true});\n  testFlat({a: [\"Test1\", \"Test2\"]}, {\"a.0\": \"Test1\", \"a.1\": \"Test2\"});\n  testFlat({a: [\"Test1\", \"Test2\"]}, {a: [\"Test1\", \"Test2\"]}, {keepArrays: true});\n  testFlat({a: [testDate, testDate]}, {\"a.0\": testDate, \"a.1\": testDate});\n  testFlat({a: [testDate, testDate]}, {a: [testDate, testDate]}, {keepArrays: true});\n  testFlat({a: {b: 1}}, {\"a.b\": 1});\n  testFlat({a: {b: \"Test\"}}, {\"a.b\": \"Test\"});\n  testFlat({a: {b: testDate}}, {\"a.b\": testDate});\n  testFlat({a: {b: []}}, {\"a.b\": []});\n  testFlat({a: {b: {}}}, {\"a.b\": {}});\n  testFlat({a: {b: [1, 2]}}, {\"a.b.0\": 1, \"a.b.1\": 2});\n  testFlat({a: {b: [1, 2]}}, {\"a.b\": [1, 2]}, {keepArrays: true});\n  testFlat({a: {b: [\"Test1\", \"Test2\"]}}, {\"a.b.0\": \"Test1\", \"a.b.1\": \"Test2\"});\n  testFlat({a: {b: [\"Test1\", \"Test2\"]}}, {\"a.b\": [\"Test1\", \"Test2\"]}, {keepArrays: true});\n  testFlat({a: {b: [testDate, testDate]}}, {\"a.b.0\": testDate, \"a.b.1\": testDate});\n  testFlat({a: {b: [testDate, testDate]}}, {\"a.b\": [testDate, testDate]}, {keepArrays: true});\n  testFlat({a: {b: [{c: 1}, {c: 2}]}}, {\"a.b.0.c\": 1, \"a.b.1.c\": 2});\n  testFlat({a: {b: [{c: 1}, {c: 2}]}}, {\"a.b\": [{c: 1}, {c: 2}]}, {keepArrays: true});\n  testFlat({a: {b: [{c: \"Test1\"}, {c: \"Test2\"}]}}, {\"a.b.0.c\": \"Test1\", \"a.b.1.c\": \"Test2\"});\n  testFlat({a: {b: [{c: \"Test1\"}, {c: \"Test2\"}]}}, {\"a.b\": [{c: \"Test1\"}, {c: \"Test2\"}]}, {keepArrays: true});\n  testFlat({a: {b: [{c: testDate}, {c: testDate}]}}, {\"a.b.0.c\": testDate, \"a.b.1.c\": testDate});\n  testFlat({a: {b: [{c: testDate}, {c: testDate}]}}, {\"a.b\": [{c: testDate}, {c: testDate}]}, {keepArrays: true});\n});\n\nTinytest.add(\"MongoObject - removeValueForPosition\", function(test) {\n  // Helper Function\n  function testRemove(o, exp, pos) {\n    var mDoc = new MongoObject(o);\n    mDoc.removeValueForPosition(pos);\n    var jo = JSON.stringify(o);\n    var jno = JSON.stringify(mDoc.getObject());\n    var jexp = JSON.stringify(exp);\n    test.equal(jno, jexp, \"After round trip, object \" + jo + \" was \" + jno + \" but should have been \" + jexp);\n  }\n\n  // correctly removed\n  testRemove({\n    foo: \"bar\"\n  }, {}, 'foo');\n\n  // correctly not removed\n  testRemove({\n    foo: \"bar\"\n  }, {\n    foo: \"bar\"\n  }, 'fooBar');\n  \n  // all descendents are removed, too\n  testRemove({\n    foo: {\n      bar: \"foobar\"\n    }\n  }, {}, 'foo');\n  \n  // but not siblings\n  testRemove({\n    foo: {\n      bar: \"foobar\",\n      foobar: 1\n    }\n  }, {\n    foo: {\n      bar: \"foobar\"\n    }\n  }, 'foo[foobar]');\n});\n\nTinytest.add(\"MongoObject - getValueForPosition\", function(test) {\n  // Helper Function\n  function testGetVal(o, pos, exp) {\n    var mDoc = new MongoObject(o);\n    var val = mDoc.getValueForPosition(pos);\n    var jo = JSON.stringify(o);\n    var jval = JSON.stringify(val);\n    var jexp = JSON.stringify(exp);\n    test.equal(jval, jexp, \"Wrong value returned for position \" + pos + \" in object \" + jo);\n  }\n  \n  testGetVal({$pull: {foo: \"bar\"}}, '$pull', {foo: \"bar\"});\n\n  testGetVal({$pull: {foo: \"bar\"}}, '$pull[foo]', 'bar');\n  \n  testGetVal({foo: ['bar']}, 'foo', ['bar']);\n  \n  testGetVal({foo: ['bar']}, 'foo[0]', 'bar');\n  \n  testGetVal({foo: [{a: 1}, {a: 2}]}, 'foo', [{a: 1}, {a: 2}]);\n  \n  testGetVal({foo: [{a: 1}, {a: 2}]}, 'foo[1]', {a: 2});\n  \n  testGetVal({foo: [{a: 1}, {a: 2}]}, 'foo[1][a]', 2);\n\n});\n\nTinytest.add(\"MongoObject - getInfoForKey\", function(test) {\n  // Helper Function\n  function testGetInfo(o, key, exp) {\n    var mDoc = new MongoObject(o);\n    var info = mDoc.getInfoForKey(key);\n    var jo = JSON.stringify(o);\n    var jinfo = JSON.stringify(info);\n    var jexp = JSON.stringify(exp);\n    test.equal(jinfo, jexp, \"Wrong info returned for object \" + jo);\n  }\n  \n  testGetInfo({$set: {foo: \"bar\"}}, 'foo', {value: 'bar', operator: '$set'});\n  \n  testGetInfo({$set: {'foo.bar': 1}}, 'foo.bar', {value: 1, operator: '$set'});\n  \n  testGetInfo({$set: {'foo.bar': 1}}, '$set', undefined); //not valid\n  \n  testGetInfo({$set: {'foo.bar.0': 1}}, 'foo.bar.0', {value: 1, operator: '$set'});\n  \n  testGetInfo({$pull: {foo: \"bar\"}}, 'foo', {value: 'bar', operator: '$pull'});\n  \n  testGetInfo({foo: ['bar']}, 'foo', {value: ['bar'], operator: null});\n  \n  testGetInfo({foo: ['bar']}, 'foo.0', {value: 'bar', operator: null});\n  \n  testGetInfo({foo: [{a: 1}, {a: 2}]}, 'foo.1.a', {value: 2, operator: null});\n  \n  testGetInfo({foo: [{a: 1}, {a: 2}]}, 'foo.1', {value: {a: 2}, operator: null});\n\n});\n\nTinytest.add(\"MongoObject - _keyToPosition\", function(test) {\n  // Helper Function\n  function convert(key, wrapAll, exp) {\n    var pos = MongoObject._keyToPosition(key, wrapAll);\n    var jpos = JSON.stringify(pos);\n    var jexp = JSON.stringify(exp);\n    test.equal(jpos, jexp, \"Key converted incorrectly to position\");\n  }\n\n  convert('foo', false, 'foo');\n  convert('foo', true, '[foo]');\n  convert('foo.bar', false, 'foo[bar]');\n  convert('foo.bar', true, '[foo][bar]');\n  convert('foo.bar.0', false, 'foo[bar][0]');\n  convert('foo.bar.0', true, '[foo][bar][0]');\n});\n\n//Test API:\n//test.isFalse(v, msg)\n//test.isTrue(v, msg)\n//test.equal(actual, expected, message, not)\n//test.length(obj, len)\n//test.include(s, v)\n//test.isNaN(v, msg)\n//test.isUndefined(v, msg)\n//test.isNotNull\n//test.isNull\n//test.throws(func)\n//test.instanceOf(obj, klass)\n//test.notEqual(actual, expected, message)\n//test.runId()\n//test.exception(exception)\n//test.expect_fail()\n//test.ok(doc)\n//test.fail(doc)\n//test.equal(a, b, msg)"]}