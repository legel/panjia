{"version":3,"file":"/packages/autoform:tests.js","sources":["autoform/tests/utility-tests.js","autoform/tests/autoform-tests.js"],"names":[],"mappings":";;;;;;;;AAAA,sB;;AAEA,kE;AACA,sC;AACA,gB;AACA,mB;AACA,c;AACA,Y;AACA,mB;AACA,U;AACA,kB;AACA,qB;AACA,gB;AACA,c;AACA,oB;AACA,Q;AACA,U;AACA,e;AACA,O;AACA,O;AACA,2D;AACA,K;;AAEA,mE;AACA,sC;AACA,gB;AACA,mB;AACA,c;AACA,Y;AACA,kB;AACA,O;AACA,wB;AACA,Y;AACA,Y;AACA,Y;AACA,W;AACA,O;AACA,K;;AAEA,qE;AACA,wB;AACA,qC;AACA,W;AACA,e;AACA,c;AACA,U;AACA,a;AACA,iB;AACA,gB;AACA,Y;AACA,W;AACA,iB;AACA,qB;AACA,oB;AACA,gB;AACA,mB;AACA,uB;AACA,sB;AACA,oG;AACA,a;AACA,W;AACA,U;AACA,iB;AACA,Q;AACA,c;AACA,Y;AACA,6C;AACA,O;AACA,qB;AACA,a;AACA,a;AACA,iB;AACA,gB;AACA,iB;AACA,qB;AACA,oB;AACA,uD;AACA,W;AACA,iB;AACA,qB;AACA,oB;AACA,gB;AACA,mB;AACA,uB;AACA,qB;AACA,mD;AACA,a;AACA,W;AACA,U;AACA,gE;AACA,Q;AACA,e;AACA,c;AACA,a;AACA,O;AACA,O;AACA,K;;AAEA,gE;AACA,wC;AACA,sC;AACA,8B;AACA,K;;AAEA,uB;AACA,2B;AACA,yB;AACA,6B;AACA,+B;AACA,qB;AACA,uB;AACA,6B;AACA,+B;AACA,yB;AACA,K;;AAEA,iE;AACA,yC;AACA,uC;AACA,8D;AACA,K;;AAEA,0B;AACA,8C;AACA,8D;AACA,mB;AACA,uB;AACA,Y;AACA,Q;AACA,wB;AACA,Y;AACA,O;AACA,mB;AACA,yB;AACA,yB;AACA,Y;AACA,Q;AACA,iC;AACA,Y;AACA,O;AACA,mB;AACA,yB;AACA,Y;AACA,Q;AACA,gC;AACA,Y;AACA,O;AACA,mB;AACA,6B;AACA,Y;AACA,Q;AACA,uC;AACA,Y;AACA,O;AACA,mB;AACA,wB;AACA,6B;AACA,Y;AACA,Q;AACA,uC;AACA,Y;AACA,O;AACA,mB;AACA,yB;AACA,6B;AACA,Y;AACA,Q;AACA,wC;AACA,Y;AACA,O;AACA,mB;AACA,yB;AACA,6B;AACA,6B;AACA,Y;AACA,Q;AACA,oD;AACA,Y;AACA,O;AACA,mB;AACA,oB;AACA,yB;AACA,Y;AACA,Q;AACA,gC;AACA,Y;AACA,O;AACA,mB;AACA,oB;AACA,wB;AACA,Y;AACA,Q;AACA,+B;AACA,Y;AACA,O;AACA,K;;AAEA,C;;AAEA,W;AACA,sB;AACA,qB;AACA,0C;AACA,uB;AACA,oB;AACA,oB;AACA,0B;AACA,gB;AACA,a;AACA,mB;AACA,6B;AACA,0C;AACA,c;AACA,2B;AACA,oB;AACA,c;AACA,gB;AACA,uB;;;;;;;;;;;;;;;;;;;ACzNA,sB;;AAEA,E;;AAEA,C;;AAEA,W;AACA,sB;AACA,qB;AACA,0C;AACA,uB;AACA,oB;AACA,oB;AACA,0B;AACA,gB;AACA,a;AACA,mB;AACA,6B;AACA,0C;AACA,c;AACA,2B;AACA,oB;AACA,c;AACA,gB;AACA,uB","sourcesContent":["if (Meteor.isClient) {\n\n  Tinytest.add('AutoForm - Utility - cleanNulls', function(test) {\n    var cleaned = Utility.cleanNulls({\n      a: void 0,\n      b: undefined,\n      c: null,\n      d: \"\",\n      e: \"keep me\",\n      f: {\n        a: void 0,\n        b: undefined,\n        c: null,\n        d: \"\",\n        e: \"keep me\"\n      },\n      g: {\n        a: null\n      }\n    });\n    test.equal(cleaned, {e: \"keep me\", f: {e: \"keep me\"}});\n  });\n\n  Tinytest.add('AutoForm - Utility - reportNulls', function(test) {\n    var report = Utility.reportNulls({\n      a: void 0,\n      b: undefined,\n      c: null,\n      d: \"\",\n      e: \"keep me\"\n    });\n    test.equal(report, {\n      a: \"\",\n      b: \"\",\n      c: \"\",\n      d: \"\"\n    });\n  });\n\n  Tinytest.add('AutoForm - Utility - docToModifier', function(test) {\n    var date = new Date;\n    var mod = Utility.docToModifier({\n      a: 1,\n      b: \"foo\",\n      c: date,\n      d: {\n        a: 1,\n        b: \"foo\",\n        c: date,\n        d: [\n          {\n            a: 1,\n            b: \"foo\",\n            c: date,\n            d: {\n              a: 1,\n              b: \"foo\",\n              c: date,\n              d: null // make sure that null, empty, etc. don't end up in $unset when under an array\n            }\n          }\n        ],\n        e: [1, 2]\n      },\n      e: null,\n      f: \"\",\n      g: void 0 //undefined props are removed\n    });\n    test.equal(mod, {\n      $set: {\n        a: 1,\n        b: \"foo\",\n        c: date,\n        'd.a': 1,\n        'd.b': \"foo\",\n        'd.c': date,\n        'd.d': [ //array of objects should remain array\n          {\n            a: 1,\n            b: \"foo\",\n            c: date,\n            d: {\n              a: 1,\n              b: \"foo\",\n              c: date\n              // null should have been removed, too\n            }\n          }\n        ],\n        'd.e': [1, 2] //array of non-objects should remain array\n      },\n      $unset: {\n        e: \"\",\n        f: \"\"\n      }\n    });\n  });\n\n  Tinytest.add('AutoForm - Utility - maybeNum', function(test) {\n    function testMaybeNum(val, expect) {\n      var mod = Utility.maybeNum(val);\n      test.equal(mod, expect);\n    }\n\n    testMaybeNum(1, 1);\n    testMaybeNum(1.1, 1.1);\n    testMaybeNum(\"1\", 1);\n    testMaybeNum(\"1.1\", 1.1);\n    testMaybeNum(\"foo\", \"foo\");\n    var d = new Date;\n    testMaybeNum(d, d);\n    testMaybeNum(true, true);\n    testMaybeNum(false, false);\n    testMaybeNum({}, {});\n  });\n\n  Tinytest.add('AutoForm - Utility - expandObj', function(test) {\n    function testExpandObj(val, expect) {\n      var mod = Utility.expandObj(val);\n      test.equal(JSON.stringify(mod), JSON.stringify(expect));\n    }\n\n    testExpandObj({}, {});\n    testExpandObj({foo: \"bar\"}, {foo: \"bar\"});\n    testExpandObj({foo: \"bar\", baz: 1}, {foo: \"bar\", baz: 1});\n    testExpandObj({\n      'foo.bar': \"baz\",\n      baz: 1\n    }, {\n      foo: {bar: \"baz\"},\n      baz: 1\n    });\n    testExpandObj({\n      'foo.bar.0': \"foo\",\n      'foo.bar.1': \"baz\",\n      baz: 1\n    }, {\n      foo: {bar: [\"foo\", \"baz\"]},\n      baz: 1\n    });\n    testExpandObj({\n      'foo.bar.1': \"baz\",\n      baz: 1\n    }, {\n      foo: {bar: [null, \"baz\"]},\n      baz: 1\n    });\n    testExpandObj({\n      'foo.bar.1.bam': \"baz\",\n      baz: 1\n    }, {\n      foo: {bar: [null, {bam: \"baz\"}]},\n      baz: 1\n    });\n    testExpandObj({\n      'foo.bar.0': null,\n      'foo.bar.1.bam': \"baz\",\n      baz: 1\n    }, {\n      foo: {bar: [null, {bam: \"baz\"}]},\n      baz: 1\n    });\n    testExpandObj({\n      'foo.bar.0': \"baz\",\n      'foo.bar.1.bam': \"baz\",\n      baz: 1\n    }, {\n      foo: {bar: [\"baz\", {bam: \"baz\"}]},\n      baz: 1\n    });\n    testExpandObj({\n      'foo.bar.0': \"baz\",\n      'foo.bar.1.bam': \"baz\",\n      'foo.bar.1.boo': \"foo\",\n      baz: 1\n    }, {\n      foo: {bar: [\"baz\", {bam: \"baz\", boo: \"foo\"}]},\n      baz: 1\n    });\n    testExpandObj({\n      'foo.0': null,\n      'foo.1.bar': \"baz\",\n      baz: 1\n    }, {\n      foo: [null, {bar: \"baz\"}],\n      baz: 1\n    });\n    testExpandObj({\n      'foo.0': null,\n      'foo.1.bar': null,\n      baz: 1\n    }, {\n      foo: [null, {bar: null}],\n      baz: 1\n    });\n  });\n\n}\n\n//Test API:\n//test.isFalse(v, msg)\n//test.isTrue(v, msg)\n//test.equalactual, expected, message, not\n//test.length(obj, len)\n//test.include(s, v)\n//test.isNaN(v, msg)\n//test.isUndefined(v, msg)\n//test.isNotNull\n//test.isNull\n//test.throws(func)\n//test.instanceOf(obj, klass)\n//test.notEqual(actual, expected, message)\n//test.runId()\n//test.exception(exception)\n//test.expect_fail()\n//test.ok(doc)\n//test.fail(doc)\n//test.equal(a, b, msg)\n","if (Meteor.isClient) {\n\n  \n\n}\n\n//Test API:\n//test.isFalse(v, msg)\n//test.isTrue(v, msg)\n//test.equalactual, expected, message, not\n//test.length(obj, len)\n//test.include(s, v)\n//test.isNaN(v, msg)\n//test.isUndefined(v, msg)\n//test.isNotNull\n//test.isNull\n//test.throws(func)\n//test.instanceOf(obj, klass)\n//test.notEqual(actual, expected, message)\n//test.runId()\n//test.exception(exception)\n//test.expect_fail()\n//test.ok(doc)\n//test.fail(doc)\n//test.equal(a, b, msg)\n"]}